- name: Manage A10 Networks AX/SoftAX/Thunder/vThunder devices
  action: a10_server
      host=                  # hostname or ip of your A10 Networks device
      password=              # admin password of your A10 Networks device
      server_ip              # slb server IP address
      server_name=           # slb server name
      server_ports           # A list of ports to create for the server. Each list item should be a dictionary which specifies the `port:' and `protocol:', but can also optionally specify the `status:'. See the examples below for details. This parameter is required when `state' is `present'.
      server_status          # slb virtual server status
      state                  # create, update or remove slb server
      username=              # admin account of your A10 Networks device

- name: Manage A10 Networks AX/SoftAX/Thunder/vThunder devices
  action: a10_service_group
      host=                  # hostname or ip of your A10 Networks device
      password=              # admin password of your A10 Networks device
      servers                # A list of servers to add to the service group. Each list item should be a dictionary which specifies the `server:' and `port:', but can also optionally specify the `status:'. See the examples below for details.
      service_group=         # slb service-group name
      service_group_method   # slb service-group loadbalancing method
      service_group_protocol   # slb service-group protocol
      username=              # admin account of your A10 Networks device
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.
      write_config           # If `yes', any changes will cause a write of the running configuration to non-volatile memory. This will save `all' configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying `yes'.

- name: Manage A10 Networks AX/SoftAX/Thunder/vThunder devices
  action: a10_virtual_server
      host=                  # hostname or ip of your A10 Networks device
      password=              # admin password of your A10 Networks device
      username=              # admin account of your A10 Networks device
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.
      virtual_server=        # slb virtual server name
      virtual_server_ip      # slb virtual server ip address
      virtual_server_ports   # A list of ports to create for the virtual server. Each list item should be a dictionary which specifies the `port:' and `type:', but can also optionally specify the `service_group:' as well as the `status:'. See the examples below for details. This parameter is required when `state' is `present'.
      virtual_server_status   # slb virtual server status
      write_config           # If `yes', any changes will cause a write of the running configuration to non-volatile memory. This will save `all' configuration changes, including those that may have been made manually or through other modules, so care should be taken when specifying `yes'.

- name: Sets and retrieves file ACL information.
  action: acl
      default                # if the target is a directory, setting this to yes will make it the default acl for entities created inside the directory. It causes an error if name is a file.
      entity                 # actual user or group that the ACL applies to when matching entity types user or group are selected.
      entry                  # DEPRECATED. The acl to set or remove.  This must always be quoted in the form of '<etype>:<qualifier>:<perms>'.  The qualifier may be empty for some types, but the type and perms are always requried. '-' can be used as placeholder when you do not care about permissions. This is now superseded by entity, type and permissions fields.
      etype                  # the entity type of the ACL to apply, see setfacl documentation for more info.
      follow                 # whether to follow symlinks on the path if a symlink is encountered.
      name=                  # The full path of the file or object.
      permissions            # Permissions to apply/remove can be any combination of r, w and  x (read, write and execute respectively)
      state                  # defines whether the ACL should be present or not.  The `query' state gets the current acl without changing it, for use in 'register' operations.

- name: add a host (and alternatively a group) to the ansible-playbook in-memory inventory
  action: add_host
      groups                 # The groups to add the hostname to, comma separated.
      name=                  # The hostname/ip of the host to add to the inventory, can include a colon and a port number.

- name: Notify airbrake about app deployments
  action: airbrake_deployment
      environment=           # The airbrake environment name, typically 'production', 'staging', etc.
      repo                   # URL of the project repository
      revision               # A hash, number, tag, or other identifier showing what revision was deployed
      token=                 # API token.
      url                    # Optional URL to submit the notification to. Use to send notifications to Airbrake-compliant tools like Errbit.
      user                   # The username of the person doing the deployment
      validate_certs         # If `no', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Manages alternative programs for common commands
  action: alternatives
      link                   # The path to the symbolic link that should point to the real executable. This option is required on RHEL-based distributions
      name=                  # The generic name of the link.
      path=                  # The path to the real executable that the link should point to.

- name: enables/disables a module of the Apache2 webserver
  action: apache2_module
      name=                  # name of the module to enable/disable
      state                  # indicate the desired state of the resource

- name: Manages apt-packages
  action: apt
      cache_valid_time       # If `update_cache' is specified and the last run is less or equal than `cache_valid_time' seconds ago, the `update_cache' gets skipped.
      deb                    # Path to a .deb package on the remote machine.
      default_release        # Corresponds to the `-t' option for `apt' and sets pin priorities
      dpkg_options           # Add dpkg options to apt command. Defaults to '-o "Dpkg::Options::=--force-confdef" -o "Dpkg::Options::=--force-confold"' Options should be supplied as comma separated list
      force                  # If `yes', force installs/removes.
      install_recommends     # Corresponds to the `--no-install-recommends' option for `apt'. Default behavior (`yes') replicates apt's default behavior; `no' does not install recommended packages. Suggested packages are never installed.
      name                   # A package name, like `foo', or package specifier with version, like `foo=1.0'. Name wildcards (fnmatch) like `apt*' and version wildcards like `foo=1.0*' are also supported.
      purge                  # Will force purging of configuration files if the module state is set to `absent'.
      state                  # Indicates the desired package state. `latest' ensures that the latest version is installed. `build-dep' ensures the package build dependencies are installed.
      update_cache           # Run the equivalent of `apt-get update' before the operation. Can be run as part of the package installation or as a separate step.
      upgrade                # If yes or safe, performs an aptitude safe-upgrade. If full, performs an aptitude full-upgrade. If dist, performs an apt-get dist-upgrade. Note: This does not upgrade a specific package, use state=latest for that.

- name: Add or remove an apt key
  action: apt_key
      data                   # keyfile contents
      file                   # keyfile path
      id                     # identifier of key
      keyring                # path to specific keyring file in /etc/apt/trusted.gpg.d
      keyserver              # keyserver to retrieve key from.
      state                  # used to specify if key is being added or revoked
      url                    # url to retrieve key from.
      validate_certs         # If `no', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Add and remove APT repositories
  action: apt_repository
      mode                   # The octal mode for newly created files in sources.list.d
      repo=                  # A source string for the repository.
      state                  # A source string state.
      update_cache           # Run the equivalent of `apt-get update' when a change occurs.  Cache updates are run after making changes.
      validate_certs         # If `no', SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: apt_rpm package manager
  action: apt_rpm
      pkg=                   # name of package to install, upgrade or remove.
      state                  # Indicates the desired package state
      update_cache           # update the package database first `apt-get update'.

- name: Assembles a configuration file from fragments
  action: assemble
      backup                 # Create a backup file (if `yes'), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      delimiter              # A delimiter to separate the file contents.
      dest=                  # A file to create using the concatenation of all of the source files.
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      regexp                 # Assemble files only if `regex' matches the filename. If not set, all files are assembled. All "\" (backslash) must be escaped as "\\" to comply yaml syntax. Uses Python regular expressions; see http://docs.python.org/2/library/re.html.
      remote_src             # If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is True.
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      src=                   # An already existing directory full of source files.

- name: Fail with custom message
  action: assert
      that=                  # A string expression of the same form that can be passed to the 'when' statement Alternatively, a list of string expressions

- name: Schedule the execution of a command or script file via the at command.
  action: at
      command                # A command to be executed in the future.
      count=                 # The count of units in the future to execute the command or script file.
      script_file            # An existing script file to be executed in the future.
      state                  # The state dictates if the command or script file should be evaluated as present(added) or absent(deleted).
      unique                 # If a matching job is present a new job will not be added.
      units=                 # The type of units in the future to execute the command or script file.

- name: Adds or removes an SSH authorized key
  action: authorized_key
      exclusive              # Whether to remove all other non-specified keys from the authorized_keys file. Multiple keys can be specified in a single key= string value by separating them by newlines.
      key=                   # The SSH public key(s), as a string or (since 1.9) url (https://github.com/username.keys)
      key_options            # A string of ssh key options to be prepended to the key in the authorized_keys file
      manage_dir             # Whether this module should manage the directory of the authorized key file.  If set, the module will create the directory, as well as set the owner and permissions of an existing directory. Be sure to set `manage_dir=no' if you are using an alternate directory for authorized_keys, as set with `path', since you could lock yourself out of SSH access. See the example below.
      path                   # Alternate path to the authorized_keys file
      state                  # Whether the given key (with the given key_options) should or should not be in the file
      user=                  # The username on the remote host whose authorized_keys file will be modified

- name: create or terminate a virtual machine in azure
  action: azure
      endpoints              # a comma-separated list of TCP ports to expose on the virtual machine (e.g., "22,80")
      hostname               # hostname to write /etc/hostname. Defaults to <name>.cloudapp.net.
      image=                 # system image for creating the virtual machine (e.g., b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu_DAILY_BUILD-precise-12_04_3-LTS-amd64-server-20131205-en-us-30GB)
      location=              # the azure location to use (e.g. 'East US')
      management_cert_path   # path to an azure management certificate associated with the subscription id. Overrides the AZURE_CERT_PATH environement variable.
      name=                  # name of the virtual machine and associated cloud service.
      password               # the unix password for the new virtual machine.
      role_size              # azure role size for the new virtual machine (e.g., Small, ExtraLarge, A6)
      ssh_cert_path          # path to an X509 certificate containing the public ssh key to install in the virtual machine. See http://www.windowsazure.com/en-us/manage/linux/tutorials/intro-to-linux/ for more details. if this option is specified, password-based ssh authentication will be disabled.
      state                  # create or terminate instances
      storage_account=       # the azure storage account in which to store the data disks.
      subscription_id        # azure subscription id. Overrides the AZURE_SUBSCRIPTION_ID environement variable.
      user                   # the unix username for the new virtual machine.
      virtual_network_name   # Name of virtual network.
      wait                   # wait for the instance to be in state 'running' before returning
      wait_timeout           # how long before wait gives up, in seconds
      wait_timeout_redirects   # how long before wait gives up for redirects, in seconds

- name: Collect facts from F5 BIG-IP devices
  action: bigip_facts
      filter                 # Shell-style glob matching string used to filter fact keys. Not applicable for software and system_info fact categories.
      include=               # Fact category or list of categories to collect
      password=              # BIG-IP password
      server=                # BIG-IP host
      session                # BIG-IP session support; may be useful to avoid concurrency issues in certain circumstances.
      user=                  # BIG-IP username

- name: Manages F5 BIG-IP LTM http monitors
  action: bigip_monitor_http
      interval               # The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.
      ip                     # IP address part of the ipport definition. The default API setting is "0.0.0.0".
      name=                  # Monitor name
      parent                 # The parent template of this monitor template
      parent_partition       # Partition for the parent monitor
      partition              # Partition for the monitor
      password=              # BIG-IP password
      port                   # port address part op the ipport definition. The default API setting is 0.
      receive=               # The receive string for the monitor call
      receive_disable=       # The receive disable string for the monitor call
      send=                  # The send string for the monitor call
      server=                # BIG-IP host
      state                  # Monitor state
      time_until_up          # Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.
      timeout                # The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.
      user=                  # BIG-IP username

- name: Manages F5 BIG-IP LTM tcp monitors
  action: bigip_monitor_tcp
      interval               # The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.
      ip                     # IP address part of the ipport definition. The default API setting is "0.0.0.0".
      name=                  # Monitor name
      parent                 # The parent template of this monitor template
      parent_partition       # Partition for the parent monitor
      partition              # Partition for the monitor
      password=              # BIG-IP password
      port                   # port address part op the ipport definition. The default API setting is 0.
      receive=               # The receive string for the monitor call
      send=                  # The send string for the monitor call
      server=                # BIG-IP host
      state                  # Monitor state
      time_until_up          # Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.
      timeout                # The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.
      type                   # The template type of this monitor template
      user=                  # BIG-IP username

- name: Manages F5 BIG-IP LTM nodes
  action: bigip_node
      description            # Node description.
      host=                  # Node IP. Required when state=present and node does not exist. Error when state=absent.
      name                   # Node name
      partition              # Partition
      password=              # BIG-IP password
      server=                # BIG-IP host
      state=                 # Pool member state
      user=                  # BIG-IP username

- name: Manages F5 BIG-IP LTM pools
  action: bigip_pool
      host                   # Pool member IP
      lb_method              # Load balancing method
      monitor_type           # Monitor rule type when monitors > 1
      monitors               # Monitor template name list. Always use the full path to the monitor.
      name=                  # Pool name
      partition              # Partition of pool/pool member
      password=              # BIG-IP password
      port                   # Pool member port
      quorum                 # Monitor quorum value when monitor_type is m_of_n
      server=                # BIG-IP host
      service_down_action    # Sets the action to take when node goes down in pool
      slow_ramp_time         # Sets the ramp-up time (in seconds) to gradually ramp up the load on newly added or freshly detected up pool members
      state                  # Pool/pool member state
      user=                  # BIG-IP username

- name: Manages F5 BIG-IP LTM pool members
  action: bigip_pool_member
      connection_limit       # Pool member connection limit. Setting this to 0 disables the limit.
      description            # Pool member description
      host=                  # Pool member IP
      partition              # Partition
      password=              # BIG-IP password
      pool=                  # Pool name. This pool must exist.
      port=                  # Pool member port
      rate_limit             # Pool member rate limit (connections-per-second). Setting this to 0 disables the limit.
      ratio                  # Pool member ratio weight. Valid values range from 1 through 100. New pool members -- unless overriden with this value -- default to 1.
      server=                # BIG-IP host
      state=                 # Pool member state
      user=                  # BIG-IP username

- name: Notify BigPanda about deployments
  action: bigpanda
      component=             # The name of the component being deployed. Ex: billing
      description            # Free text description of the deployment.
      env                    # The environment name, typically 'production', 'staging', etc.
      hosts                  # Name of affected host name. Can be a list.
      owner                  # The person responsible for the deployment.
      state=                 # State of the deployment.
      token=                 # API token.
      url                    # Base URL of the API server.
      validate_certs         # If `no', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
      version=               # The deployment version.

- name: Manage boundary meters
  action: boundary_meter
      apiid=                 # Organizations boundary API ID
      apikey=                # Organizations boundary API KEY
      name=                  # meter name
      state                  # Whether to create or remove the client from boundary
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Manage bower packages with bower
  action: bower
      name                   # The name of a bower package to install
      offline                # Install packages from local cache, if the packages were installed before
      path=                  # The base path where to install the bower packages
      state                  # The state of the bower package
      version                # The version to be installed

- name: Deploy software (or files) from bzr branches
  action: bzr
      dest=                  # Absolute path of where the branch should be cloned to.
      executable             # Path to bzr executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
      force                  # If `yes', any modified files in the working tree will be discarded.  Before 1.9 the default value was "yes".
      name=                  # SSH or HTTP protocol address of the parent branch.
      version                # What version of the branch to clone.  This can be the bzr revno or revid.

- name: Send a message to Campfire
  action: campfire
      msg=                   # The message body.
      notify                 # Send a notification sound before the message.
      room=                  # Room number to which the message should be sent.
      subscription=          # The subscription name to use.
      token=                 # API token.

- name: Manage Linux capabilities
  action: capabilities
      capability=            # Desired capability to set (with operator and flags, if state is `present') or remove (if state is `absent')
      path=                  # Specifies the path to the file to be managed.
      state                  # Whether the entry should be present or absent in the file's capabilities.

- name: create a AWS CloudFormation stack
  action: cloudformation
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      disable_rollback       # If a stacks fails to form, rollback will remove the stack
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      stack_name=            # name of the cloudformation stack
      stack_policy           # the path of the cloudformation stack policy
      state=                 # If state is "present", stack will be created.  If state is "present" and if stack exists and template has changed, it will be updated. If state is "absent", stack will be removed.
      tags                   # Dictionary of tags to associate with stack and it's resources during stack creation. Cannot be updated later. Requires at least Boto version 2.6.0.
      template=              # the path of the cloudformation template
      template_parameters    # a list of hashes of all the template variables for the stack

- name: Executes a command on a remote node
  action: command
      chdir                  # cd into this directory before running the command
      creates                # a filename, when it already exists, this step will *not* be run.
      executable             # change the shell used to execute the command. Should be an absolute path to the executable.
      free_form=             # the command module takes a free form command to run.  There is no parameter actually named 'free form'. See the examples!
      removes                # a filename, when it does not exist, this step will *not* be run.
      warn                   # if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.

- name: Dependency Manager for PHP
  action: composer
      command                # Composer command like "install", "update" and so on
      no_dev                 # Disables installation of require-dev packages ( see --no-dev )
      no_plugins             # Disables all plugins ( see --no-plugins )
      no_scripts             # Skips the execution of all scripts defined in composer.json ( see --no-scripts )
      optimize_autoloader    # Optimize autoloader during autoloader dump ( see --optimize-autoloader ). Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.
      prefer_dist            # Forces installation from package dist even for dev versions ( see --prefer-dist )
      prefer_source          # Forces installation from package sources when possible ( see --prefer-source )
      working_dir=           # Directory of your project ( see --working-dir )

- name: Copies files to remote locations.
  action: copy
      backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      content                # When used instead of 'src', sets the contents of a file directly to the specified value.
      dest=                  # Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.
      directory_mode         # When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed.
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      force                  # the default is `yes', which will replace the remote file when contents are different than the source.  If `no', the file will only be transferred if the destination does not exist.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      src                    # Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.
      validate               # The validation command to run before copying into place.  The path to the file to validate is passed in via '%s' which must be present as in the visudo example below. The command is passed securely so shell features like expansion and pipes won't work.

- name: Manages Perl library dependencies.
  action: cpanm
      from_path              # The local directory from where to install
      locallib               # Specify the install base to install modules
      mirror                 # Specifies the base URL for the CPAN mirror to use
      mirror_only            # Use the mirror's index file instead of the CPAN Meta DB
      name                   # The name of the Perl library to install. You may use the "full distribution path", e.g.  MIYAGAWA/Plack-0.99_05.tar.gz
      notest                 # Do not run unit tests

- name: Manage cron.d and crontab entries.
  action: cron
      backup                 # If set, create a backup of the crontab before it is modified. The location of the backup is returned in the `backup' variable by this module.
      cron_file              # If specified, uses this file in cron.d instead of an individual user's crontab.
      day                    # Day of the month the job should run ( 1-31, *, */2, etc )
      hour                   # Hour when the job should run ( 0-23, *, */2, etc )
      job                    # The command to execute. Required if state=present.
      minute                 # Minute when the job should run ( 0-59, *, */2, etc )
      month                  # Month of the year the job should run ( 1-12, *, */2, etc )
      name=                  # Description of a crontab entry.
      reboot                 # If the job should be run at reboot. This option is deprecated. Users should use special_time.
      special_time           # Special time specification nickname.
      state                  # Whether to ensure the job is present or absent.
      user                   # The specific user whose crontab should be modified.
      weekday                # Day of the week that the job should run ( 0-6 for Sunday-Saturday, *, etc )

- name: Encrypted Linux block devices
  action: crypttab
      backing_device         # Path to the underlying block device or file, or the UUID of a block-device prefixed with `UUID='
      name=                  # Name of the encrypted block device as it appears in the `/etc/crypttab' file, or optionaly prefixed with `/dev/mapper', as it appears in the filesystem. `/dev/mapper' will be stripped from `name'.
      opts                   # A comma-delimited list of options. See `crypttab(5' ) for details.
      password               # Encryption password, the path to a file containing the pasword, or 'none' or '-' if the password should be entered at boot.
      path                   # Path to file to use instead of `/etc/crypttab'. This might be useful in a chroot environment.
      state=                 # Use `present' to add a line to `/etc/crypttab' or update it's definition if already present. Use `absent' to remove a line with matching `name'. Use `opts_present' to add options to those already present; options with different values will be updated. Use `opts_absent' to remove options from the existing set.

- name: Posts events to DataDog  service
  action: datadog_event
      aggregation_key        # An arbitrary string to use for aggregation.
      alert_type             # Type of alert.
      api_key=               # Your DataDog API key.
      date_happened          # POSIX timestamp of the event. Default value is now.
      priority               # The priority of the event.
      tags                   # Comma separated list of tags to apply to the event.
      text=                  # The body of the event.
      title=                 # The event title.
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Configure a .deb package
  action: debconf
      name=                  # Name of package to configure.
      question               # A debconf configuration setting
      unseen                 # Do not set 'seen' flag when pre-seeding
      value                  # Value to set the configuration to
      vtype                  # The type of the value supplied

- name: Print statements during execution
  action: debug
      msg                    # The customized message that is printed. If omitted, prints a generic message.
      var                    # A variable name to debug.  Mutually exclusive with the 'msg' option.

- name: Create/delete a droplet/SSH_key in DigitalOcean
  action: digital_ocean
      api_key                # DigitalOcean api key.
      backups_enabled        # Optional, Boolean, enables backups for your droplet.
      client_id              # DigitalOcean manager id.
      command                # Which target you want to operate on.
      id                     # Numeric, the droplet id you want to operate on.
      image_id               # Numeric, this is the id of the image you would like the droplet created with.
      name                   # String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key.
      private_networking     # Bool, add an additional, private network interface to droplet for inter-droplet communication.
      region_id              # Numeric, this is the id of the region you would like your server to be created in.
      size_id                # Numeric, this is the id of the size you would like the droplet created with.
      ssh_key_ids            # Optional, comma separated list of ssh_key_ids that you would like to be added to the server.
      ssh_pub_key            # The public SSH key you want to add to your account.
      state                  # Indicate desired state of the target.
      unique_name            # Bool, require unique hostnames.  By default, DigitalOcean allows multiple hosts with the same name.  Setting this to "yes" allows only one host per name.  Useful for idempotence.
      virtio                 # Bool, turn on virtio driver in droplet for improved network and storage I/O.
      wait                   # Wait for the droplet to be in state 'running' before returning.  If wait is "no" an ip_address may not be returned.
      wait_timeout           # How long before wait gives up, in seconds.

- name: Create/delete a DNS record in DigitalOcean
  action: digital_ocean_domain
      api_key                # DigitalOcean api key.
      client_id              # DigitalOcean manager id.
      id                     # Numeric, the droplet id you want to operate on.
      ip                     # The IP address to point a domain at.
      name                   # String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key, or the name of a domain.
      state                  # Indicate desired state of the target.

- name: Create/delete an SSH key in DigitalOcean
  action: digital_ocean_sshkey
      api_key                # DigitalOcean api key.
      client_id              # DigitalOcean manager id.
      id                     # Numeric, the SSH key id you want to operate on.
      name                   # String, this is the name of an SSH key to create or destroy.
      ssh_pub_key            # The public SSH key you want to add to your account.
      state                  # Indicate desired state of the target.

- name: Manages a Django application.
  action: django_manage
      app_path=              # The path to the root of the Django application where *manage.py* lives.
      apps                   # A list of space-delimited apps to target. Used by the 'test' command.
      cache_table            # The name of the table used for database-backed caching. Used by the 'createcachetable' command.
      command=               # The name of the Django management command to run. Built in commands are cleanup, collectstatic, flush, loaddata, migrate, runfcgi, syncdb, test, and validate. Other commands can be entered, but will fail if they're unknown to Django.
      database               # The database to target. Used by the 'createcachetable', 'flush', 'loaddata', and 'syncdb' commands.
      failfast               # Fail the command immediately if a test fails. Used by the 'test' command.
      fixtures               # A space-delimited list of fixture file names to load in the database. *Required* by the 'loaddata' command.
      link                   # Will create links to the files instead of copying them, you can only use this parameter with 'collectstatic' command
      merge                  # Will run out-of-order or missing migrations as they are not rollback migrations, you can only use this parameter with 'migrate' command
      pythonpath             # A directory to add to the Python path. Typically used to include the settings module if it is located external to the application directory.
      settings               # The Python path to the application's settings module, such as 'myapp.settings'.
      skip                   # Will skip over out-of-order missing migrations, you can only use this parameter with `migrate'
      virtualenv             # An optional path to a `virtualenv' installation to use while running the manage application.

- name: Manages packages with the I(dnf) package manager
  action: dnf
      conf_file              # The remote dnf configuration file to use for the transaction.
      disable_gpg_check      # Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is `present' or `latest'.
      disablerepo            # `Repoid' of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
      enablerepo             # `Repoid' of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
      list                   # Various (non-idempotent) commands for usage with `/usr/bin/ansible' and `not' playbooks. See examples.
      name=                  # Package name, or package specifier with version, like `name-1.0'. When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file.
      state                  # Whether to install (`present', `latest'), or remove (`absent') a package.

- name: Interface with dnsimple.com (a DNS hosting service).
  action: dnsimple
      account_api_token      # Account API token. See `account_email' for info.
      account_email          # Account email. If omitted, the env variables DNSIMPLE_EMAIL and DNSIMPLE_API_TOKEN will be looked for. If those aren't found, a `.dnsimple' file will be looked for, see: https://github.com/mikemaccana/dnsimple-python#getting-started
      domain                 # Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNSimple. If omitted, a list of domains will be returned. If domain is present but the domain doesn't exist, it will be created.
      priority               # Record priority
      record                 # Record to add, if blank a record for the domain will be created, supports the wildcard (*)
      record_ids             # List of records to ensure they either exist or don't exist
      solo                   # Whether the record should be the only one for that record type and record name. Only use with state=present on a record
      state                  # whether the record should exist or not
      ttl                    # The TTL to give the new record
      type                   # The type of DNS record to create
      value                  # Record value Must be specified when trying to ensure a record exists

- name: Interface with dnsmadeeasy.com (a DNS hosting service).
  action: dnsmadeeasy
      account_key=           # Accout API Key.
      account_secret=        # Accout Secret Key.
      domain=                # Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNS Made Easy (e.g. "839989") for faster resolution.
      record_name            # Record name to get/create/delete/update. If record_name is not specified; all records for the domain will be returned in "result" regardless of the state argument.
      record_ttl             # record's "Time to live".  Number of seconds the record remains cached in DNS servers.
      record_type            # Record type.
      record_value           # Record value. HTTPRED: <redirection URL>, MX: <priority> <target name>, NS: <name server>, PTR: <target name>, SRV: <priority> <weight> <port> <target name>, TXT: <text value> If record_value is not specified; no changes will be made and the record will be returned in 'result' (in other words, this module can be used to fetch a record's current id, type, and ttl)
      state=                 # whether the record should exist or not
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: manage docker containers
  action: docker
      command                # Command used to match and launch containers.
      count                  # Number of matching containers that should be in the desired state.
      detach                 # Enable detached mode to leave the container running in background.
      dns                    # List of custom DNS servers for the container.
      docker_api_version     # Remote API version to use. This defaults to the current default as specified by docker-py.
      docker_url             # URL of the host running the docker daemon. This will default to the env var DOCKER_HOST if unspecified.
      domainname             # Container domain name.
      email                  # Remote API email.
      env                    # Pass a dict of environment variables to the container.
      expose                 # List of additional container ports to expose for port mappings or links. If the port is already exposed using EXPOSE in a Dockerfile, you don't need to expose it again.
      hostname               # Container hostname.
      image=                 # Container image used to match and launch containers.
      insecure_registry      # Use insecure private registry by HTTP instead of HTTPS. Needed for docker-py >= 0.5.0.
      links                  # List of other containers to link within this container with an optional alias. Use docker CLI-style syntax: `redis:myredis'.
      lxc_conf               # LXC configuration parameters, such as `lxc.aa_profile:unconfined'.
      memory_limit           # RAM allocated to the container as a number of bytes or as a human-readable string like "512MB". Leave as "0" to specify no limit.
      name                   # Name used to match and uniquely name launched containers. Explicit names are used to uniquely identify a single container or to link among containers. Mutually exclusive with a "count" other than "1".
      net                    # Network mode for the launched container: bridge, none, container:<name|id> or host. Requires docker >= 0.11.
      password               # Remote API password.
      pid                    # Set the PID namespace mode for the container (currently only supports 'host'). Requires docker-py >= 1.0.0 and docker >= 1.5.0
      ports                  # List containing private to public port mapping specification. Use docker CLI-style syntax: `8000', `9000:8000', or `0.0.0.0:9000:8000' where  8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host interface.
      privileged             # Whether the container should run in privileged mode or not.
      publish_all_ports      # Publish all exposed ports to the host interfaces.
      pull                   # Control when container images are updated from the `docker_url' registry. If "missing," images will be pulled only when missing from the host; if '"always," the registry will be checked for a newer version of the image' each time the task executes.
      registry               # Remote registry URL to pull images from.
      restart_policy         # Container restart policy.
      restart_policy_retry   # Maximum number of times to restart a container. Leave as "0" for unlimited retries.
      state                  # Assert the container's desired state. "present" only asserts that the matching containers exist. "started" asserts that the matching containers both exist and are running, but takes no action if any configuration has changed. "reloaded" asserts that all matching containers are running and restarts any that have any images or configuration out of date. "restarted" unconditionally restarts (or starts) the matching containers. "stopped" and '"killed" stop and kill all matching containers. "absent" stops and then' removes any matching containers.
      stdin_open             # Keep stdin open after a container is launched.
      tls_ca_cert            # Path to a PEM-encoded certificate authority to secure the Docker connection. This has no effect if use_tls is encrypt.
      tls_client_cert        # Path to the PEM-encoded certificate used to authenticate docker client. If specified tls_client_key must be valid
      tls_client_key         # Path to the PEM-encoded key used to authenticate docker client. If specified tls_client_cert must be valid
      tls_hostname           # A hostname to check matches what's supplied in the docker server's certificate.  If unspecified, the hostname is taken from the docker_url.
      tty                    # Allocate a pseudo-tty within the container.
      use_tls                # Whether to use tls to connect to the docker server.  "no" means not to use tls (and ignore any other tls related parameters). "encrypt" means to use tls to encrypt the connection to the server.  "verify" means to also verify that the server's certificate is valid for the server (this both verifies the certificate against the CA and that the certificate was issued for that host. If this is unspecified, tls will only be used if one of the other tls options require it.
      username               # Remote API username.
      volumes                # List of volumes to mount within the container using docker CLI-style syntax: `/host:/container[:mode]' where "mode" may be "rw" or "ro".
      volumes_from           # List of names of containers to mount volumes from.

- name: manage docker images
  action: docker_image
      docker_url             # URL of docker host to issue commands to
      name=                  # Image name to work with
      nocache                # Do not use cache with building
      path                   # Path to directory with Dockerfile
      state                  # Set the state of the image
      tag                    # Image tag to work with
      timeout                # Set image operation timeout

- name: Installs Python libraries
  action: easy_install
      executable             # The explicit executable or a pathname to the executable to be used to run easy_install for a specific version of Python installed in the system. For example `easy_install-3.3', if there are both Python 2.7 and 3.3 installations in the system and you want to run easy_install for the Python 3.3 installation.
      name=                  # A Python library name
      virtualenv             # an optional `virtualenv' directory path to install into. If the `virtualenv' does not exist, it is created automatically
      virtualenv_command     # The command to create the virtual environment with. For example `pyvenv', `virtualenv', `virtualenv2'.
      virtualenv_site_packages   # Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.

- name: create, terminate, start or stop an instance in ec2
  action: ec2
      assign_public_ip       # when provisioning within vpc, assign a public IP address. Boto library must be 2.13.0+
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      count                  # number of instances to launch
      count_tag              # Used with 'exact_count' to determine how many nodes based on a specific tag criteria should be running.  This can be expressed in multiple ways and is shown in the EXAMPLES section.  For instance, one can request 25 servers that are tagged with "class=webserver".
      ebs_optimized          # whether instance is using optimized EBS volumes, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      exact_count            # An integer value which indicates how many instances that match the 'count_tag' parameter should be running. Instances are either created or terminated based on this value.
      group                  # security group (or list of groups) to use with the instance
      group_id               # security group id (or list of ids) to use with the instance
      image=                 # `ami' ID to use for the instance
      instance_ids           # list of instance ids, currently used for states: absent, running, stopped
      instance_profile_name   # Name of the IAM instance profile to use. Boto library must be 2.5.0+
      instance_tags          # a hash/dictionary of tags to add to the new instance; '{"key":"value"}' and '{"key":"value","key":"value"}'
      instance_type=         # instance type to use for the instance
      kernel                 # kernel `eki' to use for the instance
      key_name               # key pair to use on the instance
      monitoring             # enable detailed monitoring (CloudWatch) for instance
      placement_group        # placement group for the instance when using EC2 Clustered Compute
      private_ip             # the private ip address to assign the instance (from the vpc subnet)
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      ramdisk                # ramdisk `eri' to use for the instance
      region                 # The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_token         # security token to authenticate against AWS
      source_dest_check      # Enable or Disable the Source/Destination checks (for NAT instances and Virtual Routers)
      spot_price             # Maximum spot price to bid, If not set a regular on-demand instance is requested. A spot request is made with this maximum bid. When it is filled, the instance is started.
      spot_wait_timeout      # how long to wait for the spot instance request to be fulfilled
      state                  # create or terminate instances
      tenancy                # An instance with a tenancy of "dedicated" runs on single-tenant hardware and can only be launched into a VPC. Valid values are "default" or "dedicated". Note that to use dedicated tenancy you MUST specify a vpc_subnet_id as well. Dedicated tenancy is not available for EC2 "micro" instances.
      user_data              # opaque blob of data which is made available to the ec2 instance
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      volumes                # a list of volume dicts, each containing device name and optionally ephemeral id or snapshot id. Size and type (and number of iops for io device type) must be specified for a new volume or a root volume, and may be passed for a snapshot volume. For any volume, a volume size less than 1 will be interpreted as a request not to create the volume.
      vpc_subnet_id          # the subnet ID in which to launch the instance (VPC)
      wait                   # wait for the instance to be 'running' before returning.  Does not wait for SSH, see 'wait_for' example for details.
      wait_timeout           # how long before wait gives up, in seconds
      zone                   # AWS availability zone in which to launch the instance

- name: create or destroy an image in ec2
  action: ec2_ami
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      delete_snapshot        # Whether or not to delete an AMI while deregistering it.
      description            # An optional human-readable string describing the contents and purpose of the AMI.
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      image_id               # Image ID to be deregistered.
      instance_id            # instance id of the image to create
      name                   # The name of the new image to create
      no_reboot              # An optional flag indicating that the bundling process should not attempt to shutdown the instance before bundling. If this flag is True, the responsibility of maintaining file system integrity is left to the owner of the instance. The default choice is "no".
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      region                 # The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_token         # security token to authenticate against AWS
      state                  # create or deregister/delete image
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      wait                   # wait for the AMI to be in state 'available' before returning.
      wait_timeout           # how long before wait gives up, in seconds

- name: Retrieve AWS AMI information for a given operating system.
  action: ec2_ami_search
      arch                   # C P U   a r c h i t e c t u r e
      distro=                # L i n u x   d i s t r i b u t i o n   ( e . g . ,   C ( u b u n t u ) )
      region                 # E C 2   r e g i o n
      release=               # s h o r t   n a m e   o f   t h e   r e l e a s e   ( e . g . ,   C ( p r e c i s e ) )
      store                  # B a c k - e n d   s t o r e   f o r   i n s t a n c e
      stream                 # T y p e   o f   r e l e a s e .
      virt                   # v i r u t a l i z a t i o n   t y p e

- name: Create or delete AWS Autoscaling Groups
  action: ec2_asg
      availability_zones     # List of availability zone names in which to create the group.  Defaults to all the availability zones in the region if vpc_zone_identifier is not set.
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      desired_capacity       # Desired number of instances in group
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      health_check_period    # Length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.
      health_check_type      # The service you want the health status from, Amazon EC2 or Elastic Load Balancer.
      launch_config_name     # Name of the Launch configuration to use for the group. See the ec2_lc module for managing these.
      lc_check               # Check to make sure instances that are being replaced with replace_instances do not aready have the current launch_config.
      load_balancers         # List of ELB names to use for the group
      max_size               # Maximum number of instances in group
      min_size               # Minimum number of instances in group
      name=                  # Unique name for group to be created or deleted
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      replace_all_instances   # In a rolling fashion, replace all instances with an old launch configuration with one from the current launch configuraiton.
      replace_batch_size     # Number of instances you'd like to replace at a time.  Used with replace_all_instances.
      replace_instances      # List of instance_ids belonging to the named ASG that you would like to terminate and be replaced with instances matching the current launch configuration.
      security_token         # security token to authenticate against AWS
      state=                 # register or deregister the instance
      tags                   # A list of tags to add to the Auto Scale Group. Optional key is 'propagate_at_launch', which defaults to true.
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      vpc_zone_identifier    # List of VPC subnets to use
      wait_for_instances     # Wait for the ASG instances to be in a ready state before exiting.  If instances are behind an ELB, it will wait until the instances are considered by the ELB.
      wait_timeout           # how long before wait instances to become viable when replaced.  Used in concjunction with instance_ids option.

- name: associate an EC2 elastic IP with an instance.
  action: ec2_eip
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      in_vpc                 # allocate an EIP inside a VPC or not
      instance_id            # The EC2 instance id
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      public_ip              # The elastic IP address to associate with the instance. If absent, allocate a new address
      region                 # the EC2 region to use
      reuse_existing_ip_allowed   # Reuse an EIP that is not associated to an instance (when available), instead of allocating a new one.
      security_token         # security token to authenticate against AWS
      state                  # If present, associate the IP with the instance. If absent, disassociate the IP with the instance.
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      wait_timeout           # how long to wait in seconds for newly provisioned EIPs to become available

- name: De-registers or registers instances from EC2 ELBs
  action: ec2_elb
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      ec2_elbs               # List of ELB names, required for registration. The ec2_elbs fact should be used if there was a previous de-register.
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      enable_availability_zone   # Whether to enable the availability zone of the instance on the target ELB if the availability zone has not already been enabled. If set to no, the task will fail if the availability zone is not enabled on the ELB.
      instance_id=           # EC2 Instance ID
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_token         # security token to authenticate against AWS
      state=                 # register or deregister the instance
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      wait                   # Wait for instance registration or deregistration to complete successfully before returning.
      wait_timeout           # Number of seconds to wait for an instance to change state. If 0 then this module may return an error if a transient error occurs. If non-zero then any transient errors are ignored until the timeout is reached. Ignored when wait=no.

- name: Creates or destroys Amazon ELB.
  action: ec2_elb_lb
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      connection_draining_timeout   # Wait a specified timeout allowing connections to drain before terminating an instance
      cross_az_load_balancing   # Distribute load across all configured Availablity Zones
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      health_check           # An associative array of health check configuration settigs (see example)
      listeners              # List of ports/protocols for this ELB to listen on (see example)
      name=                  # The name of the ELB
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      purge_listeners        # Purge existing listeners on ELB that are not found in listeners
      purge_subnets          # Purge existing subnet on ELB that are not found in subnets
      purge_zones            # Purge existing availability zones on ELB that are not found in zones
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      scheme                 # The scheme to use when creating the ELB. For a private VPC-visible ELB use 'internal'.
      security_group_ids     # A list of security groups to apply to the elb
      security_token         # security token to authenticate against AWS
      state=                 # Create or destroy the ELB
      subnets                # A list of VPC subnets to use when creating ELB. Zones should be empty if using this.
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      zones                  # List of availability zones to enable on this ELB

- name: Gathers facts about remote hosts within ec2 (aws)
  action: ec2_facts
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: maintain an ec2 VPC security group.
  action: ec2_group
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      description=           # Description of the security group.
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      name=                  # Name of the security group.
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      purge_rules            # Purge existing rules on security group that are not found in rules
      purge_rules_egress     # Purge existing rules_egress on security group that are not found in rules_egress
      region                 # the EC2 region to use
      rules                  # List of firewall inbound rules to enforce in this group (see example).
      rules_egress           # List of firewall outbound rules to enforce in this group (see example).
      security_token         # security token to authenticate against AWS
      state                  # Create or delete a security group
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      vpc_id                 # ID of the VPC to create the group in.

- name: maintain an ec2 key pair.
  action: ec2_key
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      key_material           # Public key material.
      name=                  # Name of the key pair.
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      region                 # the EC2 region to use
      security_token         # security token to authenticate against AWS
      state                  # create or delete keypair
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      wait                   # Wait for the specified action to complete before returning.
      wait_timeout           # How long before wait gives up, in seconds

- name: Create or delete AWS Autoscaling Launch Configurations
  action: ec2_lc
      assign_public_ip       # Used for Auto Scaling groups that launch instances into an Amazon Virtual Private Cloud. Specifies whether to assign a public IP address to each instance launched in a Amazon VPC.
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      ebs_optimized          # Specifies whether the instance is optimized for EBS I/O (true) or not (false).
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      image_id               # The AMI unique identifier to be used for the group
      instance_monitoring    # whether instances in group are launched with detailed monitoring.
      instance_profile_name   # The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instances.
      instance_type=         # instance type to use for the instance
      kernel_id              # Kernel id for the EC2 instance
      key_name               # The SSH key name to be used for access to managed instances
      name=                  # Unique name for configuration
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      ramdisk_id             # A RAM disk id for the instances.
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_groups        # A list of security groups into which instances should be found
      security_token         # security token to authenticate against AWS
      spot_price             # The spot price you are bidding. Only applies for an autoscaling group with spot instances.
      state=                 # register or deregister the instance
      user_data              # opaque blob of data which is made available to the ec2 instance
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      volumes                # a list of volume dicts, each containing device name and optionally ephemeral id or snapshot id. Size and type (and number of iops for io device type) must be specified for a new volume or a root volume, and may be passed for a snapshot volume. For any volume, a volume size less than 1 will be interpreted as a request not to create the volume.

- name: creates a snapshot from an existing volume
  action: ec2_snapshot
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      description            # description to be applied to the snapshot
      device_name            # device name of a mounted volume to be snapshotted
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      instance_id            # instance that has the required volume to snapshot mounted
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_token         # security token to authenticate against AWS
      snapshot_id            # snapshot id to remove
      snapshot_tags          # a hash/dictionary of tags to add to the snapshot
      state                  # whether to add or create a snapshot
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      volume_id              # volume from which to take the snapshot
      wait                   # wait for the snapshot to be ready
      wait_timeout           # how long before wait gives up, in seconds specify 0 to wait forever

- name: create and remove tag(s) to ec2 resources.
  action: ec2_tag
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      region                 # region in which the resource exists.
      resource=              # The EC2 resource id.
      security_token         # security token to authenticate against AWS
      state                  # Whether the tags should be present or absent on the resource. Use list to interrogate the tags of an instance.
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.

- name: create and attach a volume, return volume id and device map
  action: ec2_vol
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      device_name            # device id to override device mapping. Assumes /dev/sdf for Linux/UNIX and /dev/xvdf for Windows.
      ec2_url                # Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Must be specified if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used
      encrypted              # Enable encryption at rest for this volume.
      id                     # volume id if you wish to attach an existing volume (requires instance) or remove an existing volume
      instance               # instance ID if you wish to attach the volume. Since 1.9 you can set to None to detach.
      iops                   # the provisioned IOPs you want to associate with this volume (integer).
      name                   # volume Name tag if you wish to attach an existing volume (requires instance)
      profile                # uses a boto profile. Only works with boto >= 2.24.0
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_token         # security token to authenticate against AWS
      snapshot               # snapshot ID on which to base the volume
      state                  # whether to ensure the volume is present or absent, or to list existing volumes (The `list' option was added in version 1.8).
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      volume_size            # size of volume (in GB) to create.
      volume_type            # Type of EBS volume; standard (magnetic), gp2 (SSD), io1 (Provisioned IOPS). "Standard" is the old EBS default and continues to remain the Ansible default for backwards compatibility.
      zone                   # zone in which to create the volume, if unset uses the zone the instance is in (if set)

- name: configure AWS virtual private clouds
  action: ec2_vpc
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      cidr_block=            # The cidr block representing the VPC, e.g. 10.0.0.0/16
      dns_hostnames          # toggles the "Enable DNS hostname support for instances" flag
      dns_support            # toggles the "Enable DNS resolution" flag
      instance_tenancy       # The supported tenancy options for instances launched into the VPC.
      internet_gateway       # Toggle whether there should be an Internet gateway attached to the VPC
      region                 # region in which the resource exists.
      resource_tags=         # A dictionary array of resource tags of the form: { tag1: value1, tag2: value2 }.  Tags in this list are used in conjunction with CIDR block to uniquely identify a VPC in lieu of vpc_id. Therefore, if CIDR/Tag combination does not exits, a new VPC will be created.  VPC tags not on this list will be ignored. Prior to 1.7, specifying a resource tag was optional.
      route_tables           # A dictionary array of route tables to add of the form: { subnets: [172.22.2.0/24, 172.22.3.0/24,], routes: [{ dest: 0.0.0.0/0, gw: igw},] }. Where the subnets list is those subnets the route table should be associated with, and the routes list is a list of routes to be in the table.  The special keyword for the gw of igw specifies that you should the route should go through the internet gateway attached to the VPC. gw also accepts instance-ids in addition igw. This module is currently unable to affect the "main" route table due to some limitations in boto, so you must explicitly define the associated subnets or they will be attached to the main table implicitly. As of 1.8, if the route_tables parameter is not specified, no existing routes will be modified.
      state=                 # Create or terminate the VPC
      subnets                # A dictionary array of subnets to add of the form: { cidr: ..., az: ... , resource_tags: ... }. Where az is the desired availability zone of the subnet, but it is not required. Tags (i.e.: resource_tags) is also optional and use dictionary form: { "Environment":"Dev", "Tier":"Web", ...}. All VPC subnets not in this list will be removed. As of 1.8, if the subnets parameter is not specified, no existing subnets will be modified.
      validate_certs         # When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
      vpc_id                 # A VPC id to terminate when state=absent
      wait                   # wait for the VPC to be in state 'available' before returning
      wait_timeout           # how long before wait gives up, in seconds

- name: Manages users for ejabberd servers
  action: ejabberd_user
      host=                  # the ejabberd host associated with this username
      logging                # enables or disables the local syslog facility for this module
      password               # the password to assign to the username
      state                  # describe the desired state of the user to be managed
      username=              # the name of the user to manage

- name: Manage cache clusters in Amazon Elasticache.
  action: elasticache
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      cache_engine_version   # The version number of the cache engine
      cache_port             # The port number on which each of the cache nodes will accept connections
      cache_security_groups   # A list of cache security group names to associate with this cache cluster
      engine                 # Name of the cache engine to be used (memcached or redis)
      hard_modify            # Whether to destroy and recreate an existing cache cluster if necessary in order to modify its state
      name=                  # The cache cluster identifier
      node_type              # The compute and memory capacity of the nodes in the cache cluster
      num_nodes              # The initial number of cache nodes that the cache cluster will have
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_group_ids     # A list of vpc security group names to associate with this cache cluster. Only use if inside a vpc
      state=                 # `absent' or `present' are idempotent actions that will create or destroy a cache cluster as needed. `rebooted' will reboot the cluster, resulting in a momentary outage.
      wait                   # Wait for cache cluster result before returning
      zone                   # The EC2 Availability Zone in which the cache cluster will be created

- name: Runs the discovery program I(facter) on the remote system
  action: facter

- name: Fail with custom message
  action: fail
      msg                    # The customized message used for failing execution. If omitted, fail will simple bail out with a generic message.

- name: Fetches a file from remote nodes
  action: fetch
      dest=                  # A directory to save the file into. For example, if the `dest' directory is `/backup' a `src' file named `/etc/profile' on host `host.example.com', would be saved into `/backup/host.example.com/etc/profile'
      fail_on_missing        # Makes it fails when the source file is missing.
      flat                   # Allows you to override the default behavior of prepending hostname/path/to/file to the destination.  If dest ends with '/', it will use the basename of the source file, similar to the copy module. Obviously this is only handy if the filenames are unique.
      src=                   # The file on the remote system to fetch. This `must' be a file, not a directory. Recursive fetching may be supported in a later release.
      validate_checksum      # Verify that the source and destination checksums match after the files are fetched.

- name: Sets attributes of files
  action: file
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      force                  # force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the "path" file and create symlink to the "src" file in place of it).
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      path=                  # path to the file being managed.  Aliases: `dest', `name'
      recurse                # recursively set the specified file attributes (applies only to state=directory)
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      src                    # path of the file to link to (applies only to `state=link'). Will accept absolute, relative and nonexisting paths. Relative paths are not expanded.
      state                  # If `directory', all immediate subdirectories will be created if they do not exist, since 1.7 they will be created with the supplied permissions. If `file', the file will NOT be created if it does not exist, see the [copy] or [template] module if you want that behavior.  If `link', the symbolic link will be created or changed. Use `hard' for hardlinks. If `absent', directories will be recursively deleted, and files or symlinks will be unlinked. If `touch' (new in 1.4), an empty file will be created if the c(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line).

- name: Makes file system on block device
  action: filesystem
      dev=                   # Target block device.
      force                  # If yes, allows to create new filesystem on devices that already has filesystem.
      fstype=                # File System type to be created.
      opts                   # List of options to be passed to mkfs command.

- name: Enable fireball mode on remote node
  action: fireball
      minutes                # The `fireball' listener daemon is started on nodes and will stay around for this number of minutes before turning itself off.
      port                   # TCP port for ZeroMQ

- name: Manage arbitrary ports/services with firewalld
  action: firewalld
      immediate              # Should this configuration be applied immediately, if set as permanent
      permanent=             # Should this configuration be in the running firewalld configuration or persist across reboots
      port                   # Name of a port to add/remove to/from firewalld must be in the form PORT/PROTOCOL
      rich_rule              # Rich rule to add/remove to/from firewalld
      service                # Name of a service to add/remove to/from firewalld - service must be listed in /etc/services
      state=                 # Should this port accept(enabled) or reject(disabled) connections
      timeout                # The amount of time the rule should be in effect for when non-permanent
      zone                   # The firewalld zone to add/remove to/from (NOTE: default zone can be configured per system but "public" is default from upstream. Available choices can be extended based on per-system configs, listed here are "out of the box" defaults).

- name: Send a message to a flowdock
  action: flowdock
      external_user_name     # (chat only - required) Name of the "user" sending the message
      from_address           # (inbox only - required) Email address of the message sender
      from_name              # (inbox only) Name of the message sender
      link                   # (inbox only) Link associated with the message. This will be used to link the message subject in Team Inbox.
      msg=                   # Content of the message
      project                # (inbox only) Human readable identifier for more detailed message categorization
      reply_to               # (inbox only) Email address for replies
      source                 # (inbox only - required) Human readable identifier of the application that uses the Flowdock API
      subject                # (inbox only - required) Subject line of the message
      tags                   # tags of the message, separated by commas
      token=                 # API token.
      type=                  # Whether to post to 'inbox' or 'chat'
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: This module manages objects/buckets in Google Cloud Storage.
  action: gc_storage
      bucket=                # Bucket name.
      dest                   # The destination file path when downloading an object/key with a GET operation.
      expiration             # Time limit (in seconds) for the URL generated and returned by GCA when performing a mode=put or mode=get_url operation. This url is only avaialbe when public-read is the acl for the object.
      force                  # Forces an overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations.
      gcs_access_key=        # GCS access key. If not set then the value of the GCS_ACCESS_KEY environment variable is used.
      gcs_secret_key=        # GCS secret key. If not set then the value of the GCS_SECRET_KEY environment variable is used.
      mode=                  # Switches the module behaviour between upload, download, get_url (return download url) , get_str (download object as string), create (bucket) and delete (bucket).
      object                 # Keyname of the object inside the bucket. Can be also be used to create "virtual directories" (see examples).
      permission             # This option let's the user set the canned permissions on the object/bucket that are created. The permissions that can be set are 'private', 'public-read', 'authenticated-read'.
      src                    # The source file path when performing a PUT operation.

- name: create or terminate GCE instances
  action: gce
      disk_auto_delete       # if set boot disk will be removed after instance destruction
      disks                  # a list of persistent disks to attach to the instance; a string value gives the name of the disk; alternatively, a dictionary value can define 'name' and 'mode' ('READ_ONLY' or 'READ_WRITE'). The first entry will be the boot disk (which must be READ_WRITE).
      external_ip            # type of external ip, ephemeral by default
      image                  # image string to use for the instance
      instance_names         # a comma-separated list of instance names to create or destroy
      ip_forward             # set to true if the instance can forward ip packets (useful for gateways)
      machine_type           # machine type to use for the instance, use 'n1-standard-1' by default
      metadata               # a hash/dictionary of custom data for the instance; '{"key":"value",...}'
      name                   # identifier when working with a single instance
      network                # name of the network, 'default' will be used if not specified
      pem_file               # path to the pem file associated with the service account email
      persistent_boot_disk   # if set, create the instance with a persistent boot disk
      project_id             # your GCE project ID
      service_account_email   # service account email
      state                  # desired state of the resource
      tags                   # a comma-separated list of tags to associate with the instance
      zone=                  # the GCE zone to use

- name: utilize GCE image resources
  action: gce_img
      description            # an optional description
      name=                  # the name of the image to create or delete
      pem_file               # path to the pem file associated with the service account email
      project_id             # your GCE project ID
      service_account_email   # service account email
      source                 # the source disk or the Google Cloud Storage URI to create the image from
      state                  # desired state of the image
      zone                   # the zone of the disk specified by source

- name: create/destroy GCE load-balancer resources
  action: gce_lb
      external_ip            # the external static IPv4 (or auto-assigned) address for the LB
      httphealthcheck_healthy_count   # number of consecutive successful checks before marking a node healthy
      httphealthcheck_host   # host header to pass through on HTTP check requests
      httphealthcheck_interval   # the duration in seconds between each health check request
      httphealthcheck_name   # the name identifier for the HTTP health check
      httphealthcheck_path   # the url path to use for HTTP health checking
      httphealthcheck_port   # the TCP port to use for HTTP health checking
      httphealthcheck_timeout   # the timeout in seconds before a request is considered a failed check
      httphealthcheck_unhealthy_count   # number of consecutive failed checks before marking a node unhealthy
      members                # a list of zone/nodename pairs, e.g ['us-central1-a/www-a', ...]
      name                   # name of the load-balancer resource
      pem_file               # path to the pem file associated with the service account email
      port_range             # the port (range) to forward, e.g. 80 or 8000-8888 defaults to all ports
      project_id             # your GCE project ID
      protocol               # the protocol used for the load-balancer packet forwarding, tcp or udp
      region                 # the GCE region where the load-balancer is defined
      service_account_email   # service account email
      state                  # desired state of the LB

- name: create/destroy GCE networks and firewall rules
  action: gce_net
      allowed                # the protocol:ports to allow ('tcp:80' or 'tcp:80,443' or 'tcp:80-800')
      fwname                 # name of the firewall rule
      ipv4_range             # the IPv4 address range in CIDR notation for the network
      name                   # name of the network
      pem_file               # path to the pem file associated with the service account email
      project_id             # your GCE project ID
      service_account_email   # service account email
      src_range              # the source IPv4 address range in CIDR notation
      src_tags               # the source instance tags for creating a firewall rule
      state                  # desired state of the persistent disk
      target_tags            # the target instance tags for creating a firewall rule

- name: utilize GCE persistent disk resources
  action: gce_pd
      detach_only            # do not destroy the disk, merely detach it from an instance
      disk_type              # type of disk provisioned
      image                  # the source image to use for the disk
      instance_name          # instance name if you wish to attach or detach the disk
      mode                   # GCE mount mode of disk, READ_ONLY (default) or READ_WRITE
      name=                  # name of the disk
      pem_file               # path to the pem file associated with the service account email
      project_id             # your GCE project ID
      service_account_email   # service account email
      size_gb                # whole integer size of disk (in GB) to create, default is 10 GB
      snapshot               # the source snapshot to use for the disk
      state                  # desired state of the persistent disk
      zone                   # zone in which to create the disk

- name: Manage Ruby gems
  action: gem
      executable             # Override the path to the gem executable
      gem_source             # The path to a local gem used as installation source.
      include_dependencies   # Whether to include dependencies or not.
      name=                  # The name of the gem to be managed.
      pre_release            # Allow installation of pre-release versions of the gem.
      repository             # The repository from which the gem will be installed
      state                  # The desired state of the gem. `latest' ensures that the latest version is installed.
      user_install           # Install gem in user's local gems cache or for all users
      version                # Version of the gem to be installed/removed.

- name: Downloads files from HTTP, HTTPS, or FTP to node
  action: get_url
      dest=                  # absolute path of where to download the file to. If `dest' is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, `force' has no effect. If `dest' is a directory, the file will always be downloaded (regardless of the force option), but replaced only if the contents changed.
      force                  # If `yes' and `dest' is not a directory, will download the file every time and replace the file if the contents change. If `no', the file will only be downloaded if the destination does not exist. Generally should be `yes' only for small local files. Prior to 0.6, this module behaved as if `yes' was the default.
      others                 # all arguments accepted by the [file] module also work here
      sha256sum              # If a SHA-256 checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully.
      timeout                # Timeout for URL request
      url=                   # HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path
      url_password           # The password for use in HTTP basic authentication. If the `url_username' parameter is not specified, the `url_password' parameter will not be used.
      url_username           # The username for use in HTTP basic authentication. This parameter can be used without `url_password' for sites that allow empty passwords.
      use_proxy              # if `no', it will not use a proxy, even if one is defined in an environment variable on the target hosts.
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: a wrapper to the unix getent utility
  action: getent
      database=              # the name of a getent database supported by the target system (passwd, group, hosts, etc).
      fail_key               # If a supplied key is missing this will make the task fail if True
      key                    # key from which to return values from the specified database, otherwise the full contents are returned.
      split                  # character used to split the database values into lists/arrays such as ':' or '	', otherwise  it will try to pick one depending on the database

- name: Deploy software (or files) from git checkouts
  action: git
      accept_hostkey         # if `yes', adds the hostkey for the repo url if not already added. If ssh_args contains "-o StrictHostKeyChecking=no", this parameter is ignored.
      bare                   # if `yes', repository will be created as a bare repo, otherwise it will be a standard repo with a workspace.
      clone                  # If `no', do not clone the repository if it does not exist locally
      depth                  # Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is `1', otherwise ignored.
      dest=                  # Absolute path of where the repository should be checked out to. This parameter is required, unless `clone' is set to `no' This change was made in version 1.8.3. Prior to this version, the `dest' parameter was always required.
      executable             # Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
      force                  # If `yes', any modified files in the working repository will be discarded.  Prior to 0.7, this was always 'yes' and could not be disabled.  Prior to 1.9, the default was `yes`
      key_file               # Specify an optional private key file to use for the checkout.
      recursive              # if `no', repository will be cloned without the --recursive option, skipping sub-modules.
      reference              # Reference repository (see "git clone --reference ...")
      refspec                # Add an additional refspec to be fetched. If version is set to a `SHA-1' not reachable from any branch or tag, this option may be necessary to specify the ref containing the `SHA-1'. Uses the same syntax as the 'git fetch' command. An example value could be "refs/meta/config".
      remote                 # Name of the remote.
      repo=                  # git, SSH, or HTTP protocol address of the git repository.
      ssh_opts               # Creates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override ssh arguments. An example value could be "-o StrictHostKeyChecking=no"
      track_submodules       # if `yes', submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If `no', submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git submodule update.
      update                 # If `no', do not retrieve new revisions from the origin repository
      version                # What version of the repository to check out.  This can be the full 40-character `SHA-1' hash, the literal string `HEAD', a branch name, or a tag name.

- name: Manages github service hooks.
  action: github_hooks
      action=                # This tells the githooks module what you want it to do.
      content_type           # Content type to use for requests made to the webhook
      hookurl                # When creating a new hook, this is the url that you want github to post to. It is only required when creating a new hook.
      oauthkey=              # The oauth key provided by github. It can be found/generated on github under "Edit Your Profile" >> "Applications" >> "Personal Access Tokens"
      repo=                  # This is the API url for the repository you want to manage hooks for. It should be in the form of: https://api.github.com/repos/user:/repo:. Note this is different than the normal repo url.
      user=                  # Github username.
      validate_certs         # If `no', SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Add/Delete images from glance
  action: glance_image
      auth_url               # The keystone url for authentication
      container_format       # The format of the container
      copy_from              # A url from where the image can be downloaded, mutually exclusive with file parameter
      disk_format            # The format of the disk that is getting uploaded
      endpoint_type          # The name of the glance service's endpoint URL type
      file                   # The path to the file which has to be uploaded, mutually exclusive with copy_from
      is_public              # Whether the image can be accessed publicly
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      min_disk               # The minimum disk space required to deploy this image
      min_ram                # The minimum ram required to deploy this image
      name=                  # Name that has to be given to the image
      owner                  # The owner of the image
      region_name            # Name of the region
      state                  # Indicate desired state of the resource
      timeout                # The time to wait for the image process to complete in seconds

- name: Manage GlusterFS volumes
  action: gluster_volume
      brick                  # Brick path on servers
      cluster                # List of hosts to use for probing and brick setup
      directory              # Directory for limit-usage
      force                  # If brick is being created in the root partition, module will fail. Set force to true to override this behaviour
      host                   # Override local hostname (for peer probing purposes)
      name=                  # The volume name
      options                # A dictionary/hash with options/settings for the volume
      quota                  # Quota value for limit-usage (be sure to use 10.0MB instead of 10MB, see quota list)
      rebalance              # Controls whether the cluster is rebalanced after changes
      replicas               # Replica count for volume
      start_on_create        # Controls whether the volume is started after creation or not, defaults to yes
      state=                 # Use present/absent ensure if a volume exists or not, use started/stopped to control it's availability.
      stripes                # Stripe count for volume
      transport              # Transport type for volume

- name: Add or remove groups
  action: group
      gid                    # Optional `GID' to set for the group.
      name=                  # Name of the group to manage.
      state                  # Whether the group should be present or not on the remote host.
      system                 # If `yes', indicates that the group created is a system group.

- name: Create Ansible groups based on facts
  action: group_by
      key=                   # The variables whose values will be used as groups

- name: Sends a notification to a grove.io channel
  action: grove
      channel_token=         # Token of the channel to post to.
      icon_url               # Icon for the service
      message=               # Message content
      service                # Name of the service (displayed as the "user" in the message)
      url                    # Service URL for the web client
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: An Ansible module to handle states enable/disable server and set weight to backend host in haproxy using socket commands.
  action: haproxy
      backend                # Name of the haproxy backend pool. Required, else auto-detection applied.
      host=                  # Host (backend) to operate in Haproxy.
      shutdown_sessions      # When disabling server, immediately terminate all the sessions attached to the specified server. This can be used to terminate long-running sessions after a server is put into maintenance mode, for instance.
      socket                 # Haproxy socket file name with path.
      state=                 # describe the desired state of the given host in lb pool.
      weight                 # The value passed in argument. If the value ends with the '%' sign, then the new weight will be relative to the initially cnfigured weight. Relative weights are only permitted between 0 and 100% and absolute weights are permitted between 0 and 256.

- name: Manages Mercurial (hg) repositories.
  action: hg
      dest=                  # Absolute path of where the repository should be cloned to.
      executable             # Path to hg executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
      force                  # Discards uncommitted changes. Runs `hg update -C'.  Prior to 1.9, the default was `yes`.
      purge                  # Deletes untracked files. Runs `hg purge'.
      repo=                  # The repository address.
      revision               # Equivalent `-r' option in hg command which could be the changeset, revision number, branch name or even tag.

- name: Send a message to hipchat
  action: hipchat
      api                    # API url if using a self-hosted hipchat server
      color                  # Background color for the message. Default is yellow.
      from                   # Name the message will appear be sent from. max 15 characters. Over 15, will be shorten.
      msg=                   # The message body.
      msg_format             # message format. html or text. Default is text.
      notify                 # notify or not (change the tab color, play a sound, etc)
      room=                  # ID or name of the room.
      token=                 # API token.
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Package manager for Homebrew
  action: homebrew
      install_options        # options flags to install a package
      name=                  # name of package to install/remove
      state                  # state of the package
      update_homebrew        # update homebrew itself first
      upgrade_all            # upgrade all homebrew packages

- name: Install/uninstall homebrew casks.
  action: homebrew_cask
      name=                  # name of cask to install/remove
      state                  # state of the cask

- name: Tap a Homebrew repository.
  action: homebrew_tap
      state                  # state of the repository.
      tap=                   # The repository to tap.

- name: Manage hostname
  action: hostname
      name=                  # Name of the host

- name: manage user files for basic authentication
  action: htpasswd
      create                 # Used with `state=present'. If specified, the file will be created if it does not already exist. If set to "no", will fail if the file does not exist
      crypt_scheme           # Encryption scheme to be used.
      name=                  # User name to add or remove
      password               # Password associated with user. Must be specified if user does not exist yet.
      path=                  # Path to the file that contains the usernames and passwords
      state                  # Whether the user entry should be present or not

- name: Load variables from files, dynamically within a task.
  action: include_vars
      free-form=             # The file name from which variables should be loaded, if called from a role it will look for the file in vars/ subdirectory of the role, otherwise the path would be relative to playbook. An absolute path can also be provided.

- name: Tweak settings in INI files
  action: ini_file
      backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      dest=                  # Path to the INI-style file; this file is created if required
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      option                 # if set (required for changing a `value'), this is the name of the option. May be omitted if adding/removing a whole `section'.
      others                 # all arguments accepted by the [file] module also work here
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      section=               # Section name in INI file. This is added if `state=present' automatically when a single value is being set.
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      value                  # the string value to be associated with an `option'. May be omitted when removing an `option'.

- name: Send a message to an IRC channel
  action: irc
      channel=               # Channel name
      color                  # Text color for the message. ("none" is a valid option in 1.6 or later, in 1.6 and prior, the default color is black, not "none").
      key                    # Channel key
      msg=                   # The message body.
      nick                   # Nickname. May be shortened, depending on server's NICKLEN setting.
      passwd                 # Server password
      port                   # IRC server port number
      server                 # IRC server name/address
      timeout                # Timeout to use while waiting for successful registration and join messages, this is to prevent an endless loop
      use_ssl                # Designates whether TLS/SSL should be used when connecting to the IRC server

- name: Send a message to jabber user or chat room
  action: jabber
      encoding               # m e s s a g e   e n c o d i n g
      host                   # h o s t   t o   c o n n e c t ,   o v e r r i d e s   u s e r   i n f o
      msg=                   # The message body.
      password=              # p a s s w o r d   f o r   u s e r   t o   c o n n e c t
      port                   # p o r t   t o   c o n n e c t   t o ,   o v e r r i d e s   d e f a u l t
      to=                    # u s e r   I D   o r   n a m e   o f   t h e   r o o m ,   w h e n   u s i n g   r o o m   u s e   a   s l a s h   t o   i n d i c a t e   y o u r   n i c k .
      user=                  # U s e r   a s   w h i c h   t o   c o n n e c t

- name: deploy applications to JBoss
  action: jboss
      deploy_path            # The location in the filesystem where the deployment scanner listens
      deployment=            # The name of the deployment
      src                    # The remote path of the application ear or war to deploy
      state                  # Whether the application should be deployed or undeployed

- name: create and modify issues in a JIRA instance
  action: jira
      assignee               # Sets the assignee on create or transition operations. Note not all transitions will allow this.
      comment                # The comment text to add.
      description            # The issue description, where appropriate.
      fields                 # This is a free-form data structure that can contain arbitrary data. This is passed directly to the JIRA REST API (possibly after merging with other required data, as when passed to create). See examples for more information, and the JIRA REST API for the structure required for various fields.
      issue                  # An existing issue key to operate on.
      issuetype              # The issue type, for issue creation.
      operation=             # The operation to perform.
      password=              # The password to log-in with.
      project                # The project for this operation. Required for issue creation.
      status                 # The desired status; only relevant for the transition operation.
      summary                # The issue summary, where appropriate.
      uri=                   # Base URI for the JIRA instance
      username=              # The username to log-in with.

- name: Blacklist kernel modules
  action: kernel_blacklist
      blacklist_file         # If specified, use this blacklist file instead of `/etc/modprobe.d/blacklist-ansible.conf'.
      name=                  # Name of kernel module to black- or whitelist.
      state                  # Whether the module should be present in the blacklist or absent.

- name: Manage OpenStack Identity (keystone) users, tenants and roles
  action: keystone_user
      email                  # An email address for the user
      endpoint               # The keystone url for authentication
      login_password         # Password of login user
      login_tenant_name      # The tenant login_user belongs to
      login_user             # login username to authenticate to keystone
      password               # The password to be assigned to the user
      role                   # The name of the role to be assigned or created
      state                  # Indicate desired state of the resource
      tenant                 # The tenant name that has be added/removed
      tenant_description     # A description for the tenant
      token                  # The token to be uses in case the password is not specified
      user                   # The name of the user that has to added/removed from OpenStack

- name: Add or remove a host from the C(known_hosts) file
  action: known_hosts
      key                    # The SSH public host key, as a string (required if state=present, optional when state=absent, in which case all keys for the host are removed)
      name=                  # The host to add or remove (must match a host specified in key)
      path                   # The known_hosts file to edit
      state                  # `present' to add the host, `absent' to remove it.

- name: Manage Gentoo overlays
  action: layman
      list_url               # An URL of the alternative overlays list that defines the overlay to install. This list will be fetched and saved under `${overlay_defs}'/${name}.xml), where `overlay_defs' is readed from the Layman's configuration.
      name=                  # The overlay id to install, synchronize, or uninstall. Use 'ALL' to sync all of the installed overlays (can be used only when `state=updated').
      state                  # Whether to install (`present'), sync (`updated'), or uninstall (`absent') the overlay.
      validate_certs         # If `no', SSL certificates will not be validated. This should only be set to `no' when no other option exists.  Prior to 1.9.3 the code defaulted to `no'.

- name: create an annotation in librato
  action: librato_annotation
      api_key=               # Librato account api key
      description            # The description contains extra meta-data about a particular annotation The description should contain specifics on the individual annotation e.g. Deployed 9b562b2 shipped new feature foo!
      end_time               # The unix timestamp indicating the the time at which the event referenced by this annotation ended For events that have a duration, this is a useful way to annotate the duration of the event
      links=                 # See examples
      name                   # The annotation stream name If the annotation stream does not exist, it will be created automatically
      source                 # A string which describes the originating source of an annotation when that annotation is tracked across multiple members of a population
      start_time             # The unix timestamp indicating the the time at which the event referenced by this annotation started
      title=                 # The title of an annotation is a string and may contain spaces The title should be a short, high-level summary of the annotation e.g. v45 Deployment
      user=                  # Librato account username

- name: Ensure a particular line is in a file, or replace an existing line using a back-referenced regular expression.
  action: lineinfile
      backrefs               # Used with `state=present'. If set, line can contain backreferences (both positional and named) that will get populated if the `regexp' matches. This flag changes the operation of the module slightly; `insertbefore' and `insertafter' will be ignored, and if the `regexp' doesn't match anywhere in the file, the file will be left unchanged. If the `regexp' does match, the last matching line will be replaced by the expanded line parameter.
      backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      create                 # Used with `state=present'. If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.
      dest=                  # The file to modify.
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      insertafter            # Used with `state=present'. If specified, the line will be inserted after the last match of specified regular expression. A special value is available; `EOF' for inserting the line at the end of the file. If specified regular expresion has no matches, EOF will be used instead. May not be used with `backrefs'.
      insertbefore           # Used with `state=present'. If specified, the line will be inserted before the last match of specified regular expression. A value is available; `BOF' for inserting the line at the beginning of the file. If specified regular expresion has no matches, the line will be inserted at the end of the file.  May not be used with `backrefs'.
      line                   # Required for `state=present'. The line to insert/replace into the file. If `backrefs' is set, may contain backreferences that will get expanded with the `regexp' capture groups if the regexp matches. The backreferences should be double escaped (see examples).
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      others                 # All arguments accepted by the [file] module also work here.
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      regexp                 # The regular expression to look for in every line of the file. For `state=present', the pattern to replace if found; only the last line found will be replaced. For `state=absent', the pattern of the line to remove.  Uses Python regular expressions; see http://docs.python.org/2/library/re.html.
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      state                  # Whether the line should be there or not.
      validate               # validation to run before copying into place. Use %s in the command to indicate the current file to validate. The command is passed securely so shell features like expansion and pipes won't work.

- name: create / delete / stop / restart an instance in Linode Public Cloud
  action: linode
      api_key                # Linode API key
      datacenter             # datacenter to create an instance in (Linode Datacenter)
      distribution           # distribution to use for the instance (Linode Distribution)
      linode_id              # Unique ID of a linode server
      name                   # Name to give the instance (alphanumeric, dashes, underscore) To keep sanity on the Linode Web Console, name is prepended with LinodeID_
      password               # root password to apply to a new server (auto generated if missing)
      payment_term           # payment term to use for the instance (payment term in months)
      plan                   # plan to use for the instance (Linode plan)
      ssh_pub_key            # SSH public key applied to root user
      state                  # Indicate desired state of the resource
      swap                   # swap size in MB
      wait                   # wait for the instance to be in state 'running' before returning
      wait_timeout           # how long before wait gives up, in seconds

- name: get details reported by lldp
  action: lldp

- name: Creates or removes locales.
  action: locale_gen
      name=                  # Name and encoding of the locale, such as "en_GB.UTF-8".
      state                  # Whether the locale shall be present.

- name: Module for tracking logs via logentries.com
  action: logentries
      logtype                # type of the log
      name                   # name of the log
      path=                  # path to a log file
      state                  # following state of the log

- name: Configure LVM volume groups
  action: lvg
      force                  # If yes, allows to remove volume group with logical volumes.
      pesize                 # The size of the physical extent in megabytes. Must be a power of 2.
      pvs                    # List of comma-separated devices to use as physical devices in this volume group. Required when creating or resizing volume group.
      state                  # Control if the volume group exists.
      vg=                    # The name of the volume group.
      vg_options             # Additional options to pass to `vgcreate' when creating the volume group.

- name: Configure LVM logical volumes
  action: lvol
      force                  # Shrink or remove operations of volumes requires this switch. Ensures that that filesystems get never corrupted/destroyed by mistake.
      lv=                    # The name of the logical volume.
      size                   # The size of the logical volume, according to lvcreate(8) --size, by default in megabytes or optionally with one of [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) --extents as a percentage of [VG|PVS|FREE]; resizing is not supported with percentages.
      state                  # Control if the logical volume exists.
      vg=                    # The volume group this logical volume is part of.

- name: Manage LXC Containers
  action: lxc_container
      archive                # Create an archive of a container. This will create a tarball of the running container.
      archive_compression    # Type of compression to use when creating an archive of a running container.
      archive_path           # Path the save the archived container. If the path does not exist the archive method will attempt to create it.
      backing_store          # Backend storage type for the container.
      config                 # Path to the LXC configuration file.
      container_command      # Run a command within a container.
      container_config       # list of 'key=value' options to use when configuring a container.
      container_log          # Enable a container log for host actions to the container.
      container_log_level    # Set the log level for a container where *container_log* was set.
      directory              # Place rootfs directory under DIR.
      fs_size                # File system Size.
      fs_type                # Create fstype TYPE.
      lv_name                # Name of the logical volume, defaults to the container name.
      lxc_path               # Place container under PATH
      name=                  # Name of a container.
      state                  # Start a container right after it's created.
      template               # Name of the template to use within an LXC create.
      template_options       # Template options when building the container.
      thinpool               # Use LVM thin pool called TP.
      vg_name                # If Backend store is lvm, specify the name of the volume group.
      zfs_root               # Create zfs under given zfsroot.

- name: Package manager for MacPorts
  action: macports
      name=                  # name of package to install/remove
      state                  # state of the package
      update_cache           # update the package db first

- name: Send an email
  action: mail
      attach                 # A space-separated list of pathnames of files to attach to the message. Attached files will have their content-type set to `application/octet-stream'.
      bcc                    # The email-address(es) the mail is being 'blind' copied to. This is a comma-separated list, which may contain address and phrase portions.
      body                   # The body of the email being sent.
      cc                     # The email-address(es) the mail is being copied to. This is a comma-separated list, which may contain address and phrase portions.
      charset                # The character set of email being sent
      from                   # The email-address the mail is sent from. May contain address and phrase.
      headers                # A vertical-bar-separated list of headers which should be added to the message. Each individual header is specified as `header=value' (see example below).
      host                   # The mail server
      password               # If SMTP requires password
      port                   # The mail server port
      subject=               # The subject of the email being sent.
      to                     # The email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions.
      username               # If SMTP requires username

- name: Add or remove kernel modules
  action: modprobe
      name=                  # Name of kernel module to manage.
      params                 # Modules parameters.
      state                  # Whether the module should be present or absent.

- name: Adds or removes a user from a MongoDB database.
  action: mongodb_user
      database=              # The name of the database to add/remove the user from
      login_host             # The host running the database
      login_password         # The password used to authenticate with
      login_port             # The port to connect to
      login_user             # The username used to authenticate with
      name=                  # The name of the user to add or remove
      password               # The password to use for the user
      replica_set            # Replica set to connect to (automatically connects to primary for writes)
      roles                  # The database user roles valid values are one or more of the following: read, 'readWrite', 'dbAdmin', 'userAdmin', 'clusterAdmin', 'readAnyDatabase', 'readWriteAnyDatabase', 'userAdminAnyDatabase', 'dbAdminAnyDatabase' This param requires mongodb 2.4+ and pymongo 2.5+
      ssl                    # Whether to use an SSL connection when connecting to the database
      state                  # The database user state

- name: Manage the state of a program monitored via Monit
  action: monit
      name=                  # The name of the `monit' program/process to manage
      state=                 # The state of service

- name: Control active and configured mount points
  action: mount
      dump                   # dump (see fstab(8))
      fstab                  # file to use instead of `/etc/fstab'. You shouldn't use that option unless you really know what you are doing. This might be useful if you need to configure mountpoints in a chroot environment.
      fstype=                # file-system type
      name=                  # path to the mount point, eg: `/mnt/files'
      opts                   # mount options (see fstab(8))
      passno                 # passno (see fstab(8))
      src=                   # device to be mounted on `name'.
      state=                 # If `mounted' or `unmounted', the device will be actively mounted or unmounted as needed and appropriately configured in `fstab'. `absent' and `present' only deal with `fstab' but will not affect current mounting. If specifying `mounted' and the mount point is not present, the mount point will be created. Similarly, specifying `absent'        will remove the mount point directory.

- name: Publish a message on an MQTT topic for the IoT
  action: mqtt
      client_id              # MQTT client identifier
      password               # Password for `username' to authenticate against the broker.
      payload=               # Payload. The special string `"None"' may be used to send a NULL (i.e. empty) payload which is useful to simply notify with the `topic' or to clear previously retained messages.
      port                   # MQTT broker port number
      qos                    # QoS (Quality of Service)
      retain                 # Setting this flag causes the broker to retain (i.e. keep) the message so that applications that subsequently subscribe to the topic can received the last retained message immediately.
      server                 # MQTT broker address/name
      topic=                 # MQTT topic name
      username               # Username to authenticate against the broker.

- name: Add or remove MySQL databases from a remote host.
  action: mysql_db
      collation              # Collation mode
      encoding               # Encoding mode
      login_host             # Host running the database
      login_password         # The password used to authenticate with
      login_port             # Port of the MySQL server. Requires login_host be defined as other then localhost if login_port is used
      login_unix_socket      # The path to a Unix domain socket for local connections
      login_user             # The username used to authenticate with
      name=                  # name of the database to add or remove
      state                  # The database state
      target                 # Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL files (`.sql') as well as bzip2 (`.bz2') and gzip (`.gz') compressed files are supported.

- name: Manage MySQL replication
  action: mysql_replication
      login_host             # mysql host to connect
      login_password         # password to connect mysql host, if defined login_user also needed.
      login_port             # Port of the MySQL server. Requires login_host be defined as other then localhost if login_port is used
      login_unix_socket      # unix socket to connect mysql server
      login_user             # username to connect mysql host, if defined login_password also needed.
      master_connect_retry   # same as mysql variable
      master_host            # same as mysql variable
      master_log_file        # same as mysql variable
      master_log_pos         # same as mysql variable
      master_password        # same as mysql variable
      master_port            # same as mysql variable
      master_ssl             # same as mysql variable
      master_ssl_ca          # same as mysql variable
      master_ssl_capath      # same as mysql variable
      master_ssl_cert        # same as mysql variable
      master_ssl_cipher      # same as mysql variable
      master_ssl_key         # same as mysql variable
      master_user            # same as mysql variable
      mode                   # module operating mode. Could be getslave (SHOW SLAVE STATUS), getmaster (SHOW MASTER STATUS), changemaster (CHANGE MASTER TO), startslave (START SLAVE), stopslave (STOP SLAVE)
      relay_log_file         # same as mysql variable
      relay_log_pos          # same as mysql variable

- name: Adds or removes a user from a MySQL database.
  action: mysql_user
      append_privs           # Append the privileges defined by priv to the existing ones for this user instead of overwriting existing ones.
      check_implicit_admin   # Check if mysql allows login as root/nopassword before trying supplied credentials.
      host                   # the 'host' part of the MySQL username
      login_host             # Host running the database
      login_password         # The password used to authenticate with
      login_port             # Port of the MySQL server
      login_unix_socket      # The path to a Unix domain socket for local connections
      login_user             # The username used to authenticate with
      name=                  # name of the user (role) to add or remove
      password               # set the user's password
      priv                   # MySQL privileges string in the format: `db.table:priv1,priv2'
      state                  # Whether the user should exist.  When `absent', removes the user.

- name: Manage MySQL global variables
  action: mysql_variables
      login_host             # mysql host to connect
      login_password         # password to connect mysql host, if defined login_user also needed.
      login_unix_socket      # unix socket to connect mysql server
      login_user             # username to connect mysql host, if defined login_password also needed.
      value                  # If set, then sets variable value to this
      variable=              # Variable name to operate

- name: Perform common tasks in Nagios related to downtime and notifications.
  action: nagios
      action=                # Action to take.
      author                 # Author to leave downtime comments as. Only usable with the `downtime' action.
      cmdfile                # Path to the nagios `command file' (FIFO pipe). Only required if auto-detection fails.
      command=               # The raw command to send to nagios, which should not include the submitted time header or the line-feed *Required* option when using the `command' action.
      host                   # Host to operate on in Nagios.
      minutes                # Minutes to schedule downtime for. Only usable with the `downtime' action.
      services=              # What to manage downtime/alerts for. Separate multiple services with commas. `service' is an alias for `services'. *Required* option when using the `downtime', `enable_alerts', and `disable_alerts' actions.

- name: Manages Citrix NetScaler entities
  action: netscaler
      action                 # the action you want to perform on the entity
      name=                  # name of the entity
      nsc_host=              # hostname or ip of your netscaler
      nsc_protocol           # protocol used to access netscaler
      password=              # password
      type                   # type of the entity
      user=                  # username
      validate_certs         # If `no', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Notify newrelic about app deployments
  action: newrelic_deployment
      app_name               # (one of app_name or application_id are required) The value of app_name in the newrelic.yml file used by the application
      application_id         # (one of app_name or application_id are required) The application id, found in the URL when viewing the application in RPM
      appname                # Name of the application
      changelog              # A list of changes for this deployment
      description            # Text annotation for the deployment - notes for you
      environment            # The environment for this deployment
      revision               # A revision number (e.g., git commit SHA)
      token=                 # API token.
      user                   # The name of the user/process that triggered this deployment
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Send a SMS via nexmo
  action: nexmo
      api_key=               # Nexmo API Key
      api_secret=            # Nexmo API Secret
      dest=                  # Phone number(s) to send SMS message to
      msg=                   # Message to text to send. Messages longer than 160 characters will be split into multiple messages
      src=                   # Nexmo Number to send from
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Create/Delete VMs from OpenStack
  action: nova_compute
      auth_url               # The keystone url for authentication
      auto_floating_ip       # Should a floating ip be auto created and assigned
      availability_zone      # Name of the availability zone
      config_drive           # Whether to boot the server with config drive enabled
      flavor_id              # The id of the flavor in which the new VM has to be created. Mutually exclusive with flavor_ram
      flavor_include         # Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.
      flavor_ram             # The minimum amount of ram in MB that the flavor in which the new VM has to be created must have. Mutually exclusive with flavor_id
      floating_ip_pools      # list of floating IP pools from which to choose a floating IP
      floating_ips           # list of valid floating IPs that pre-exist to assign to this node
      image_exclude          # Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to "(deprecated)"
      image_id=              # The id of the base image to boot. Mutually exclusive with image_name
      image_name=            # The name of the base image to boot. Mutually exclusive with image_id
      key_name               # The key pair name to be used when creating a VM
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      meta                   # A list of key value pairs that should be provided as a metadata to the new VM
      name=                  # Name that has to be given to the instance
      nics                   # A list of network id's to which the VM's interface should be attached
      region_name            # Name of the region
      scheduler_hints        # Arbitrary key/value pairs to the scheduler for custom use
      security_groups        # The name of the security group to which the VM should be added
      state                  # Indicate desired state of the resource
      user_data              # Opaque blob of data which is made available to the instance
      wait                   # If the module should wait for the VM to be created.
      wait_for               # The amount of time the module should wait for the VM to get into active state

- name: Add/Delete key pair from nova
  action: nova_keypair
      auth_url               # The keystone url for authentication
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      name=                  # Name that has to be given to the key pair
      public_key             # The public key that would be uploaded to nova and injected to vm's upon creation
      region_name            # Name of the region
      state                  # Indicate desired state of the resource

- name: Manage node.js packages with npm
  action: npm
      executable             # The executable location for npm. This is useful if you are using a version manager, such as nvm
      global                 # Install the node.js library globally
      ignore_scripts         # Use the --ignore-scripts flag when installing.
      name                   # The name of a node.js library to install
      path                   # The base path where to install the node.js libraries
      production             # Install dependencies in production mode, excluding devDependencies
      registry               # The registry to install modules from.
      state                  # The state of the node.js library
      version                # The version to be installed

- name: Returns inventory data from I(Ohai)
  action: ohai

- name: Manage iscsi targets with open-iscsi
  action: open_iscsi
      auto_node_startup      # whether the target node should be automatically connected at startup
      discover               # whether the list of target nodes on the portal should be (re)discovered and added to the persistent iscsi database. Keep in mind that iscsiadm discovery resets configurtion, like node.startup to manual, hence combined with auto_node_startup=yes will allways return a changed state.
      login                  # whether the target node should be connected
      node_auth              # discovery.sendtargets.auth.authmethod
      node_pass              # discovery.sendtargets.auth.password
      node_user              # discovery.sendtargets.auth.username
      port                   # the port on which the iscsi target process listens
      portal                 # the ip address of the iscsi target
      show_nodes             # whether the list of nodes in the persistent iscsi database should be returned by the module
      target                 # the iscsi target name

- name: Manage packages on OpenBSD.
  action: openbsd_pkg
      name=                  # Name of the package.
      state=                 # `present' will make sure the package is installed. `latest' will make sure the latest version of the package is installed. `absent' will make sure the specified package is not installed.

- name: Manage Open vSwitch bridges
  action: openvswitch_bridge
      bridge=                # Name of bridge to manage
      state                  # Whether the bridge should exist
      timeout                # How long to wait for ovs-vswitchd to respond

- name: Manage Open vSwitch ports
  action: openvswitch_port
      bridge=                # Name of bridge to manage
      port=                  # Name of port to manage on the bridge
      state                  # Whether the port should exist
      timeout                # How long to wait for ovs-vswitchd to respond

- name: Package manager for OpenWrt
  action: opkg
      name=                  # name of package to install/remove
      state                  # state of the package
      update_cache           # update the package db first

- name: Makes an OSX computer to speak.
  action: osx_say
      msg=                   # W h a t   t o   s a y
      voice                  # W h a t   v o i c e   t o   u s e

- name: oVirt/RHEV platform management
  action: ovirt
      disk_alloc             # define if disk is thin or preallocated
      disk_int               # interface type of the disk
      image                  # template to use for the instance
      instance_cores         # define the instance's number of cores
      instance_cpus          # the instance's number of cpu's
      instance_disksize      # size of the instance's disk in GB
      instance_mem           # the instance's amount of memory in MB
      instance_name=         # the name of the instance to use
      instance_network       # the logical network the machine should belong to
      instance_nic           # name of the network interface in oVirt/RHEV
      instance_os            # type of Operating System
      instance_type          # define if the instance is a server or desktop
      password=              # password of the user to authenticate with
      region                 # the oVirt/RHEV datacenter where you want to deploy to
      resource_type          # whether you want to deploy an image or create an instance from scratch.
      sdomain                # the Storage Domain where you want to create the instance's disk on.
      state                  # create, terminate or remove instances
      url=                   # the url of the oVirt instance
      user=                  # the user to authenticate with
      zone                   # deploy the image to this oVirt cluster

- name: Manage packages with I(pacman)
  action: pacman
      name                   # Name of the package to install, upgrade, or remove.
      recurse                # When removing a package, also remove its dependencies, provided that they are not required by other packages and were not explicitly installed by a user.
      state                  # Desired state of the package.
      update_cache           # Whether or not to refresh the master package lists. This can be run as part of a package installation or as a separate step.

- name: Create PagerDuty maintenance windows
  action: pagerduty
      desc                   # Short description of maintenance window.
      hours                  # Length of maintenance window in hours.
      minutes                # Maintenance window in minutes (this is added to the hours).
      name=                  # PagerDuty unique subdomain.
      passwd=                # PagerDuty user password.
      requester_id=          # ID of user making the request. Only needed when using a token and creating a maintenance_window.
      service                # PagerDuty service ID.
      state=                 # Create a maintenance window or get a list of ongoing windows.
      token=                 # A pagerduty token, generated on the pagerduty site. Can be used instead of user/passwd combination.
      user=                  # PagerDuty user ID.
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Apply patch files using the GNU patch tool.
  action: patch
      basedir                # Path of a base directory in which the patch file will be applied. May be ommitted when `dest' option is specified, otherwise required.
      dest                   # Path of the file on the remote machine to be patched. The names of the files to be patched are usually taken from the patch file, but if there's just one file to be patched it can specified with this option.
      remote_src             # If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is False.
      src=                   # Path of the patch file as accepted by the GNU patch tool. If `remote_src' is False, the patch source file is looked up from the module's "files" directory.
      strip                  # Number that indicates the smallest prefix containing leading slashes that will be stripped from each file name found in the patch file. For more information see the strip parameter of the GNU patch tool.

- name: Pause playbook execution
  action: pause
      minutes                # Number of minutes to pause for.
      prompt                 # Optional text to use for the prompt message.
      seconds                # Number of seconds to pause for.

- name: Try to connect to host and return C(pong) on success.
  action: ping

- name: Pause/unpause Pingdom alerts
  action: pingdom
      checkid=               # Pingdom ID of the check.
      key=                   # Pingdom API key.
      passwd=                # Pingdom user password.
      state=                 # Define whether or not the check should be running or paused.
      uid=                   # Pingdom user ID.

- name: Manages Python library dependencies.
  action: pip
      chdir                  # cd into this directory before running the command
      executable             # The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example `pip-3.3', if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation.
      extra_args             # Extra arguments passed to pip.
      name                   # The name of a Python library to install or the url of the remote package.
      requirements           # The path to a pip requirements file
      state                  # The state of module
      version                # The version number to install of the Python library specified in the `name' parameter
      virtualenv             # An optional path to a `virtualenv' directory to install into
      virtualenv_command     # The command or a pathname to the command to create the virtual environment with. For example `pyvenv', `virtualenv', `virtualenv2', `~/bin/virtualenv', `/usr/local/bin/virtualenv'.
      virtualenv_site_packages   # Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.

- name: Manages packages with the Solaris 11 Image Packaging System
  action: pkg5
      name=                  # An FRMI of the package(s) to be installed/removed/updated. Multiple packages may be specified, separated by `,'.
      state                  # Whether to install (`present', `latest'), or remove (`absent') a package.

- name: Manages Solaris 11 Image Packaging System publishers
  action: pkg5_publisher
      enabled                # Is the repository enabled or disabled?
      mirror                 # A path or URL to the repository mirror. Multiple values may be provided.
      name=                  # The publisher's name.
      origin                 # A path or URL to the repository. Multiple values may be provided.
      state                  # Whether to ensure that a publisher is present or absent.
      sticky                 # Packages installed from a sticky repository can only receive updates from that repository.

- name: Package manager for SmartOS, NetBSD, et al.
  action: pkgin
      name=                  # Name of package to install/remove; multiple names may be given, separated by commas
      state                  # Intended state of the package

- name: Package manager for FreeBSD >= 9.0
  action: pkgng
      annotation             # a comma-separated list of keyvalue-pairs of the form <+/-/:><key>[=<value>]. A '+' denotes adding an annotation, a '-' denotes removing an annotation, and ':' denotes modifying an annotation. If setting or modifying annotations, a value must be provided.
      cached                 # use local package base or try to fetch an updated one
      name=                  # name of package to install/remove
      pkgsite                # for pkgng versions before 1.1.4, specify packagesite to use for downloading packages, if not specified, use settings from /usr/local/etc/pkg.conf for newer pkgng versions, specify a the name of a repository configured in /usr/local/etc/pkg/repos
      state                  # state of the package

- name: Manage CSW-Packages on Solaris
  action: pkgutil
      name=                  # Package name, e.g. (`CSWnrpe')
      site                   # Specifies the repository path to install the package from. Its global definition is done in `/etc/opt/csw/pkgutil.conf'.
      state=                 # Whether to install (`present'), or remove (`absent') a package. The upgrade (`latest') operation will update/install the package to the latest version available. Note: The module has a limitation that (`latest') only works for one package, not lists of them.

- name: Package manager for Gentoo
  action: portage
      changed_use            # Include installed packages where USE flags have changed, except when flags that the user has not enabled are added or removed (--changed-use)
      deep                   # Consider the entire dependency tree of packages (--deep)
      depclean               # Remove packages not needed by explicitly merged packages (--depclean) If no package is specified, clean up the world's dependencies Otherwise, --depclean serves as a dependency aware version of --unmerge
      getbinpkg              # Prefer packages specified at PORTAGE_BINHOST in make.conf
      newuse                 # Include installed packages where USE flags have changed (--newuse)
      nodeps                 # Only merge packages but not their dependencies (--nodeps)
      noreplace              # Do not re-emerge installed packages (--noreplace)
      oneshot                # Do not add the packages to the world file (--oneshot)
      onlydeps               # Only merge packages' dependencies but not the packages (--onlydeps)
      package                # Package atom or set, e.g. `sys-apps/foo' or `>foo-2.13' or `@world'
      quiet                  # Run emerge in quiet mode (--quiet)
      state                  # State of the package atom
      sync                   # Sync package repositories first If yes, perform "emerge --sync" If web, perform "emerge-webrsync"
      update                 # Update packages to the best version available (--update)
      usepkgonly             # Merge only binaries (no compiling). This sets getbinpkg=yes.
      verbose                # Run emerge in verbose mode (--verbose)

- name: Installing packages from FreeBSD`s ports system
  action: portinstall
      name=                  # name of package to install/remove
      state                  # state of the package
      use_packages           # use packages instead of ports whenever available

- name: Add or remove PostgreSQL databases from a remote host.
  action: postgresql_db
      encoding               # Encoding of the database
      lc_collate             # Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless `template0' is used as template.
      lc_ctype               # Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database unless `template0' is used as template.
      login_host             # Host running the database
      login_password         # The password used to authenticate with
      login_unix_socket      # Path to a Unix domain socket for local connections
      login_user             # The username used to authenticate with
      name=                  # name of the database to add or remove
      owner                  # Name of the role to set as owner of the database
      port                   # Database port to connect to.
      state                  # The database state
      template               # Template used to create the database

- name: Add or remove PostgreSQL extensions from a database.
  action: postgresql_ext
      db=                    # name of the database to add or remove the extension to/from
      login_host             # Host running the database
      login_password         # The password used to authenticate with
      login_user             # The username used to authenticate with
      name=                  # name of the extension to add or remove
      port                   # Database port to connect to.
      state                  # The database extension state

- name: Adds, removes or changes procedural languages with a PostgreSQL database.
  action: postgresql_lang
      cascade                # when dropping a language, also delete object that depend on this language. only used when `state=absent'.
      db                     # name of database where the language will be added, removed or changed
      fail_on_drop           # if `yes', fail when removing a language. Otherwise just log and continue in some cases, it is not possible to remove a language (used by the db-system). When         dependencies block the removal, consider using `cascade'.
      force_trust            # marks the language as trusted, even if it's marked as untrusted in pg_pltemplate. use with care!
      lang=                  # name of the procedural language to add, remove or change
      login_host             # Host running PostgreSQL where you want to execute the actions.
      login_password         # Password used to authenticate with PostgreSQL (must match `login_user')
      login_user             # User used to authenticate with PostgreSQL
      port                   # Database port to connect to.
      state                  # The state of the language for the selected database
      trust                  # make this language trusted for the selected db

- name: Grant or revoke privileges on PostgreSQL database objects.
  action: postgresql_privs
      database=              # Name of database to connect to. Alias: `db'
      grant_option           # Whether `role' may grant/revoke the specified privileges/group memberships to others. Set to `no' to revoke GRANT OPTION, leave unspecified to make no changes. `grant_option' only has an effect if `state' is `present'. Alias: `admin_option'
      host                   # Database host address. If unspecified, connect via Unix socket. Alias: `login_host'
      login                  # The username to authenticate with. Alias: `login_user'
      objs                   # Comma separated list of database objects to set privileges on. If `type' is `table' or `sequence', the special value `ALL_IN_SCHEMA' can be provided instead to specify all database objects of type `type' in the schema specified via `schema'. (This also works with PostgreSQL < 9.0.) If `type' is `database', this parameter can be omitted, in which case privileges are set for the database specified via `database'. If `type' is `function', colons (":") in object names will be replaced with commas (needed to specify function signatures, see examples) Alias: `obj'
      password               # The password to authenticate with. Alias: `login_password')
      port                   # Database port to connect to.
      privs                  # Comma separated list of privileges to grant/revoke. Alias: `priv'
      roles=                 # Comma separated list of role (user/group) names to set permissions for. The special value `PUBLIC' can be provided instead to set permissions for the implicitly defined PUBLIC group. Alias: `role'
      schema                 # Schema that contains the database objects specified via `objs'. May only be provided if `type' is `table', `sequence' or `function'. Defaults to  `public' in these cases.
      state                  # If `present', the specified privileges are granted, if `absent' they are revoked.
      type                   # Type of database object to set privileges on.
      unix_socket            # Path to a Unix domain socket for local connections. Alias: `login_unix_socket'

- name: Adds or removes a users (roles) from a PostgreSQL database.
  action: postgresql_user
      db                     # name of database where permissions will be granted
      encrypted              # denotes if the password is already encrypted. boolean.
      expires                # sets the user's password expiration.
      fail_on_user           # if `yes', fail when user can't be removed. Otherwise just log and continue
      login_host             # Host running PostgreSQL.
      login_password         # Password used to authenticate with PostgreSQL
      login_unix_socket      # Path to a Unix domain socket for local connections
      login_user             # User (role) used to authenticate with PostgreSQL
      name=                  # name of the user (role) to add or remove
      password               # set the user's password, before 1.4 this was required. When passing an encrypted password, the encrypted parameter must also be true, and it must be generated with the format `'str["md5"] + md5[ password + username ]'', resulting in a total of 35 characters.  An easy way to do this is: `echo "md5`echo -n "verysecretpasswordJOE" | md5`"'.
      port                   # Database port to connect to.
      priv                   # PostgreSQL privileges string in the format: `table:priv1,priv2'
      role_attr_flags        # PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER
      state                  # The user (role) state

- name: Add/Remove floating IP from an instance
  action: quantum_floating_ip
      auth_url               # The keystone url for authentication
      instance_name=         # The name of the instance to which the IP address should be assigned
      internal_network_name   # The name of the network of the port to associate with the floating ip. Necessary when VM multiple networks.
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      network_name=          # Name of the network from which IP has to be assigned to VM. Please make sure the network is an external network
      region_name            # Name of the region
      state                  # Indicate desired state of the resource

- name: Associate or disassociate a particular floating IP with an instance
  action: quantum_floating_ip_associate
      auth_url               # the keystone url for authentication
      instance_name=         # name of the instance to which the public IP should be assigned
      ip_address=            # floating ip that should be assigned to the instance
      login_password=        # password of login user
      login_tenant_name=     # the tenant name of the login user
      login_username=        # login username to authenticate to keystone
      region_name            # name of the region
      state                  # indicates the desired state of the resource

- name: Creates/Removes networks from OpenStack
  action: quantum_network
      admin_state_up         # Whether the state should be marked as up or down
      auth_url               # The keystone url for authentication
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      name=                  # Name to be assigned to the nework
      provider_network_type   # The type of the network to be created, gre, vlan, local. Available types depend on the plugin. The Quantum service decides if not specified.
      provider_physical_network   # The physical network which would realize the virtual network for flat and vlan networks.
      provider_segmentation_id   # The id that has to be assigned to the network, in case of vlan networks that would be vlan id and for gre the tunnel id
      region_name            # Name of the region
      router_external        # If 'yes', specifies that the virtual network is a external network (public).
      shared                 # Whether this network is shared or not
      state                  # Indicate desired state of the resource
      tenant_name            # The name of the tenant for whom the network is created

- name: Create or Remove router from openstack
  action: quantum_router
      admin_state_up         # desired admin state of the created router .
      auth_url               # The keystone url for authentication
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      name=                  # Name to be give to the router
      region_name            # Name of the region
      state                  # Indicate desired state of the resource
      tenant_name            # Name of the tenant for which the router has to be created, if none router would be created for the login tenant.

- name: set/unset a gateway interface for the router with the specified external network
  action: quantum_router_gateway
      auth_url               # The keystone URL for authentication
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      network_name=          # Name of the external network which should be attached to the router.
      region_name            # Name of the region
      router_name=           # Name of the router to which the gateway should be attached.
      state                  # Indicate desired state of the resource

- name: Attach/Dettach a subnet`s interface to a router
  action: quantum_router_interface
      auth_url               # The keystone URL for authentication
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      region_name            # Name of the region
      router_name=           # Name of the router to which the subnet's interface should be attached.
      state                  # Indicate desired state of the resource
      subnet_name=           # Name of the subnet to whose interface should be attached to the router.
      tenant_name            # Name of the tenant whose subnet has to be attached.

- name: Add/remove subnet from a network
  action: quantum_subnet
      allocation_pool_end    # From the subnet pool the last IP that should be assigned to the virtual machines
      allocation_pool_start   # From the subnet pool the starting address from which the IP should be allocated
      auth_url               # The keystone URL for authentication
      cidr=                  # The CIDR representation of the subnet that should be assigned to the subnet
      dns_nameservers        # DNS nameservers for this subnet, comma-separated
      enable_dhcp            # Whether DHCP should be enabled for this subnet.
      gateway_ip             # The ip that would be assigned to the gateway for this subnet
      ip_version             # The IP version of the subnet 4 or 6
      login_password=        # Password of login user
      login_tenant_name=     # The tenant name of the login user
      login_username=        # login username to authenticate to keystone
      name=                  # The name of the subnet that should be created
      network_name=          # Name of the network to which the subnet should be attached
      region_name            # Name of the region
      state                  # Indicate desired state of the resource
      tenant_name            # The name of the tenant for whom the subnet should be created

- name: Adds or removes parameters to RabbitMQ
  action: rabbitmq_parameter
      component=             # Name of the component of which the parameter is being set
      name=                  # Name of the parameter being set
      node                   # erlang node name of the rabbit we wish to configure
      state                  # Specify if user is to be added or removed
      value                  # Value of the parameter, as a JSON term
      vhost                  # vhost to apply access privileges.

- name: Adds or removes plugins to RabbitMQ
  action: rabbitmq_plugin
      names=                 # Comma-separated list of plugin names
      new_only               # Only enable missing plugins Does not disable plugins that are not in the names list
      prefix                 # Specify a custom install prefix to a Rabbit
      state                  # Specify if plugins are to be enabled or disabled

- name: Manage the state of policies in RabbitMQ.
  action: rabbitmq_policy
      name=                  # The name of the policy to manage.
      node                   # Erlang node name of the rabbit we wish to configure.
      pattern=               # A regex of queues to apply the policy to.
      priority               # The priority of the policy.
      state                  # The state of the policy.
      tags=                  # A dict or string describing the policy.
      vhost                  # The name of the vhost to apply to.

- name: Adds or removes users to RabbitMQ
  action: rabbitmq_user
      configure_priv         # Regular expression to restrict configure actions on a resource for the specified vhost. By default all actions are restricted.
      force                  # Deletes and recreates the user.
      node                   # erlang node name of the rabbit we wish to configure
      password               # Password of user to add. To change the password of an existing user, you must also specify `force=yes'.
      read_priv              # Regular expression to restrict configure actions on a resource for the specified vhost. By default all actions are restricted.
      state                  # Specify if user is to be added or removed
      tags                   # User tags specified as comma delimited
      user=                  # Name of user to add
      vhost                  # vhost to apply access privileges.
      write_priv             # Regular expression to restrict configure actions on a resource for the specified vhost. By default all actions are restricted.

- name: Manage the state of a virtual host in RabbitMQ
  action: rabbitmq_vhost
      name=                  # The name of the vhost to manage
      node                   # erlang node name of the rabbit we wish to configure
      state                  # The state of vhost
      tracing                # Enable/disable tracing for a vhost

- name: Executes a low-down and dirty SSH command
  action: raw
      executable             # change the shell used to execute the command. Should be an absolute path to the executable.
      free_form=             # the raw module takes a free form command to run

- name: create / delete an instance in Rackspace Public Cloud
  action: rax
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      auto_increment         # Whether or not to increment a single number with the name of the created servers. Only applicable when used with the `group' attribute or meta key.
      boot_from_volume       # Whether or not to boot the instance from a Cloud Block Storage volume. If `yes' and `image' is specified a new volume will be created at boot time. `boot_volume_size' is required with `image' to create a new volume at boot time.
      boot_volume            # Cloud Block Storage ID or Name to use as the boot volume of the instance
      boot_volume_size       # Size of the volume to create in Gigabytes. This is only required with `image' and `boot_from_volume'.
      boot_volume_terminate   # Whether the `boot_volume' or newly created volume from `image' will be terminated when the server is terminated
      config_drive           # Attach read-only configuration drive to server as label config-2
      count                  # number of instances to launch
      count_offset           # number count to start at
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      disk_config            # Disk partitioning strategy
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      exact_count            # Explicitly ensure an exact count of instances, used with state=active/present. If specified as `yes' and `count' is less than the servers matched, servers will be deleted to match the count. If the number of matched servers is fewer than specified in `count' additional servers will be added.
      extra_client_args      # A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced option, use it wisely and with caution.
      extra_create_args      # A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it wisely and with caution.
      files                  # Files to insert into the instance. remotefilename:localcontent
      flavor                 # flavor to use for the instance
      group                  # host group to assign to server, is also used for idempotent operations to ensure a specific number of instances
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      image                  # image to use for the instance. Can be an `id', `human_id' or `name'. With `boot_from_volume', a Cloud Block Storage volume will be created with this image
      instance_ids           # list of instance ids, currently only used when state='absent' to remove instances
      key_name               # key pair to use on the instance
      meta                   # A hash of metadata to associate with the instance
      name                   # Name to give the instance
      networks               # The network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be `id' or `label'.
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      user_data              # Data to be uploaded to the servers config drive. This option implies `config_drive'. Can be a file path or a string
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints
      wait                   # wait for the instance to be in state 'running' before returning
      wait_timeout           # how long before wait gives up, in seconds

- name: Manipulate Rackspace Cloud Block Storage Volumes
  action: rax_cbs
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      description            # Description to give the volume being created
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      image                  # image to use for bootable volumes. Can be an `id', `human_id' or `name'. This option requires `pyrax>=1.9.3'
      meta                   # A hash of metadata to associate with the volume
      name=                  # Name to give the volume being created
      region                 # Region to create an instance in
      size=                  # Size of the volume to create in Gigabytes
      snapshot_id            # The id of the snapshot to create the volume from
      state=                 # Indicate desired state of the resource
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints
      volume_type=           # Type of the volume being created
      wait                   # wait for the volume to be in state 'available' before returning
      wait_timeout           # how long before wait gives up, in seconds

- name: Manipulate Rackspace Cloud Block Storage Volume Attachments
  action: rax_cbs_attachments
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      device=                # The device path to attach the volume to, e.g. /dev/xvde
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      region                 # Region to create an instance in
      server=                # Name or id of the server to attach/detach
      state=                 # Indicate desired state of the resource
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints
      volume=                # Name or id of the volume to attach/detach
      wait                   # wait for the volume to be in 'in-use'/'available' state before returning
      wait_timeout           # how long before wait gives up, in seconds

- name: create/delete or resize a Rackspace Cloud Databases instance
  action: rax_cdb
      api_key                # Rackspace API key (overrides `credentials')
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      flavor                 # flavor to use for the instance 1 to 6 (i.e. 512MB to 16GB)
      name                   # Name of the databases server instance
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints
      volume                 # Volume size of the database 1-150GB
      wait                   # wait for the instance to be in state 'running' before returning
      wait_timeout           # how long before wait gives up, in seconds

- name: create / delete a database in the Cloud Databases
  action: rax_cdb_database
      api_key                # Rackspace API key (overrides `credentials')
      cdb_id                 # The databases server UUID
      character_set          # Set of symbols and encodings
      collate                # Set of rules for comparing characters in a character set
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      name                   # Name to give to the database
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: create / delete a Rackspace Cloud Database
  action: rax_cdb_user
      api_key                # Rackspace API key (overrides `credentials')
      cdb_id                 # The databases server UUID
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      databases              # Name of the databases that the user can access
      db_password            # Database user password
      db_username            # Name of the database user
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      host                   # Specifies the host from which a user is allowed to connect to the database. Possible values are a string containing an IPv4 address or "%" to allow connecting from any host
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: create / delete a load balancer in Rackspace Public Cloud
  action: rax_clb
      algorithm              # algorithm for the balancer being created
      api_key                # Rackspace API key (overrides `credentials')
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      meta                   # A hash of metadata to associate with the instance
      name                   # Name to give the load balancer
      port                   # Port for the balancer being created
      protocol               # Protocol for the balancer being created
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      timeout                # timeout for communication between the balancer and the node
      type                   # type of interface for the balancer being created
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints
      vip_id                 # Virtual IP ID to use when creating the load balancer for purposes of sharing an IP with another load balancer of another protocol
      wait                   # wait for the balancer to be in state 'running' before returning
      wait_timeout           # how long before wait gives up, in seconds

- name: add, modify and remove nodes from a Rackspace Cloud Load Balancer
  action: rax_clb_nodes
      address                # IP address or domain name of the node
      api_key                # Rackspace API key (overrides `credentials')
      condition              # Condition for the node, which determines its role within the load balancer
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      load_balancer_id=      # Load balancer id
      node_id                # Node id
      port                   # Port number of the load balanced service on the node
      region                 # Region to create an instance in
      state                  # Indicate desired state of the node
      type                   # Type of node
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints
      wait                   # Wait for the load balancer to become active before returning
      wait_timeout           # How long to wait before giving up and returning an error
      weight                 # Weight of node

- name: Manage DNS records on Rackspace Cloud DNS
  action: rax_dns_record
      api_key                # Rackspace API key (overrides `credentials')
      comment                # Brief description of the domain. Maximum length of 160 characters
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      data=                  # IP address for A/AAAA record, FQDN for CNAME/MX/NS, or text data for SRV/TXT
      domain                 # Domain name to create the record in. This is an invalid option when type=PTR
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      loadbalancer           # Load Balancer ID to create a PTR record for. Only used with type=PTR
      name=                  # FQDN record name to create
      priority               # Required for MX and SRV records, but forbidden for other record types. If specified, must be an integer from 0 to 65535.
      region                 # Region to create an instance in
      server                 # Server ID to create a PTR record for. Only used with type=PTR
      state                  # Indicate desired state of the resource
      ttl                    # Time to live of record in seconds
      type=                  # DNS record type
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: Gather facts for Rackspace Cloud Servers
  action: rax_facts
      address                # Server IP address to retrieve facts for, will match any IP assigned to the server
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      id                     # Server ID to retrieve facts for
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      name                   # Server name to retrieve facts for
      region                 # Region to create an instance in
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: Manipulate Rackspace Cloud Files Containers
  action: rax_files
      api_key                # Rackspace API key (overrides `credentials')
      clear_meta             # Optionally clear existing metadata when applying metadata to existing containers. Selecting this option is only appropriate when setting type=meta
      container=             # The container to use for container or metadata operations.
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      meta                   # A hash of items to set as metadata values on a container
      private                # Used to set a container as private, removing it from the CDN.  *Warning!* Private containers, if previously made public, can have live objects available until the TTL on cached objects expires
      public                 # Used to set a container as public, available via the Cloud Files CDN
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      ttl                    # In seconds, set a container-wide TTL for all objects cached on CDN edge nodes. Setting a TTL is only appropriate for containers that are public
      type                   # Type of object to do work on, i.e. metadata object or a container object
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints
      web_error              # Sets an object to be presented as the HTTP error page when accessed by the CDN URL
      web_index              # Sets an object to be presented as the HTTP index page when accessed by the CDN URL

- name: Upload, download, and delete objects in Rackspace Cloud Files
  action: rax_files_objects
      api_key                # Rackspace API key (overrides `credentials')
      clear_meta             # Optionally clear existing metadata when applying metadata to existing objects. Selecting this option is only appropriate when setting type=meta
      container=             # The container to use for file object operations.
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      dest                   # The destination of a "get" operation; i.e. a local directory, "/home/user/myfolder". Used to specify the destination of an operation on a remote object; i.e. a file name, "file1", or a comma-separated list of remote objects, "file1,file2,file17"
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      expires                # Used to set an expiration on a file or folder uploaded to Cloud Files. Requires an integer, specifying expiration in seconds
      meta                   # A hash of items to set as metadata values on an uploaded file or folder
      method                 # The method of operation to be performed.  For example, put to upload files to Cloud Files, get to download files from Cloud Files or delete to delete remote objects in Cloud Files
      region                 # Region to create an instance in
      src                    # Source from which to upload files.  Used to specify a remote object as a source for an operation, i.e. a file name, "file1", or a comma-separated list of remote objects, "file1,file2,file17".  src and dest are mutually exclusive on remote-only object operations
      state                  # Indicate desired state of the resource
      structure              # Used to specify whether to maintain nested directory structure when downloading objects from Cloud Files.  Setting to false downloads the contents of a container to a single, flat directory
      type                   # Type of object to do work on Metadata object or a file object
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: Load Rackspace Cloud Identity
  action: rax_identity
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: Create a keypair for use with Rackspace Cloud Servers
  action: rax_keypair
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      name=                  # Name of keypair
      public_key             # Public Key string to upload. Can be a file path or string
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: Manipulate metadata for Rackspace Cloud Servers
  action: rax_meta
      address                # Server IP address to modify metadata for, will match any IP assigned to the server
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      id                     # Server ID to modify metadata for
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      meta                   # A hash of metadata to associate with the instance
      name                   # Server name to modify metadata for
      region                 # Region to create an instance in
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: create / delete an isolated network in Rackspace Public Cloud
  action: rax_network
      api_key                # Rackspace API key (overrides `credentials')
      auth_endpoint          # The URI of the authentication service
      cidr                   # cidr of the network being created
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      identity_type          # Authentication machanism to use, such as rackspace or keystone
      label                  # Label (name) to give the network
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      tenant_id              # The tenant ID used for authentication
      tenant_name            # The tenant name used for authentication
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: create / delete a queue in Rackspace Public Cloud
  action: rax_queue
      api_key                # Rackspace API key (overrides `credentials')
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      name                   # Name to give the queue
      region                 # Region to create an instance in
      state                  # Indicate desired state of the resource
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: Manipulate Rackspace Cloud Autoscale Groups
  action: rax_scaling_group
      api_key                # Rackspace API key (overrides `credentials')
      config_drive           # Attach read-only configuration drive to server as label config-2
      cooldown               # The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      disk_config            # Disk partitioning strategy
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      files                  # Files to insert into the instance. Hash of `remotepath: localpath'
      flavor=                # flavor to use for the instance
      image=                 # image to use for the instance. Can be an `id', `human_id' or `name'
      key_name               # key pair to use on the instance
      loadbalancers          # List of load balancer `id' and `port' hashes
      max_entities=          # The maximum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.
      meta                   # A hash of metadata to associate with the instance
      min_entities=          # The minimum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.
      name=                  # Name to give the scaling group
      networks               # The network to attach to the instances. If specified, you must include ALL networks including the public and private interfaces. Can be `id' or `label'.
      region                 # Region to create an instance in
      server_name=           # The base name for servers created by Autoscale
      state                  # Indicate desired state of the resource
      user_data              # Data to be uploaded to the servers config drive. This option implies `config_drive'. Can be a file path or a string
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: Manipulate Rackspace Cloud Autoscale Scaling Policy
  action: rax_scaling_policy
      api_key                # Rackspace API key (overrides `credentials')
      at                     # The UTC time when this policy will be executed. The time must be formatted according to `yyyy-MM-dd'T'HH:mm:ss.SSS' such as `2013-05-19T08:07:08Z'
      change                 # The change, either as a number of servers or as a percentage, to make in the scaling group. If this is a percentage, you must set `is_percent' to `true' also.
      cooldown               # The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).
      credentials            # File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
      cron                   # The time when the policy will be executed, as a cron entry. For example, if this is parameter is set to `1 0 * * *'
      desired_capacity       # The desired server capacity of the scaling the group; that is, how many servers should be in the scaling group.
      env                    # Environment as configured in ~/.pyrax.cfg, see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration
      is_percent             # Whether the value in `change' is a percent value
      name=                  # Name to give the policy
      policy_type=           # The type of policy that will be executed for the current release.
      region                 # Region to create an instance in
      scaling_group=         # Name of the scaling group that this policy will be added to
      state                  # Indicate desired state of the resource
      username               # Rackspace username (overrides `credentials')
      verify_ssl             # Whether or not to require SSL validation of API endpoints

- name: create, delete, or modify an Amazon rds instance
  action: rds
      apply_immediately      # Used only when command=modify.  If enabled, the modifications will be applied as soon as possible rather than waiting for the next preferred maintenance window.
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      backup_retention       # Number of days backups are retained.  Set to 0 to disable backups.  Default is 1 day.  Valid range: 0-35. Used only when command=create or command=modify.
      backup_window          # Backup window in format of hh24:mi-hh24:mi.  If not specified then a random backup window is assigned. Used only when command=create or command=modify.
      character_set_name     # Associate the DB instance with a specified character set. Used with command=create.
      command=               # Specifies the action to take.
      db_engine              # The type of database.  Used only when command=create.
      db_name                # Name of a database to create within the instance.  If not specified then no database is created. Used only when command=create.
      engine_version         # Version number of the database engine to use. Used only when command=create. If not specified then the current Amazon RDS default engine version is used.
      instance_name          # Database instance identifier. Required except when using command=facts or command=delete on just a snapshot
      instance_type          # The instance type of the database.  Must be specified when command=create. Optional when command=replicate, command=modify or command=restore. If not specified then the replica inherits the same instance type as the source instance.
      iops                   # Specifies the number of IOPS for the instance.  Used only when command=create or command=modify. Must be an integer greater than 1000.
      license_model          # The license model for this DB instance. Used only when command=create or command=restore.
      maint_window           # Maintenance window in format of ddd:hh24:mi-ddd:hh24:mi.  (Example: Mon:22:00-Mon:23:15) If not specified then a random maintenance window is assigned. Used only when command=create or command=modify.
      multi_zone             # Specifies if this is a Multi-availability-zone deployment. Can not be used in conjunction with zone parameter. Used only when command=create or command=modify.
      new_instance_name      # Name to rename an instance to. Used only when command=modify.
      option_group           # The name of the option group to use.  If not specified then the default option group is used. Used only when command=create.
      parameter_group        # Name of the DB parameter group to associate with this instance.  If omitted then the RDS default DBParameterGroup will be used. Used only when command=create or command=modify.
      password               # Password for the master database username. Used only when command=create or command=modify.
      port                   # Port number that the DB instance uses for connections.  Defaults to 3306 for mysql. Must be changed to 1521 for Oracle, 1443 for SQL Server, 5432 for PostgreSQL. Used only when command=create or command=replicate.
      publicly_accessible    # explicitly set whether the resource should be publicly accessible or not. Used with command=create, command=replicate. Requires boto >= 2.26.0
      region=                # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      security_groups        # Comma separated list of one or more security groups.  Used only when command=create or command=modify.
      size                   # Size in gigabytes of the initial storage for the DB instance. Used only when command=create or command=modify.
      snapshot               # Name of snapshot to take. When command=delete, if no snapshot name is provided then no snapshot is taken. If used with command=delete with no instance_name, the snapshot is deleted. Used with command=facts, command=delete or command=snapshot.
      source_instance        # Name of the database to replicate. Used only when command=replicate.
      subnet                 # VPC subnet group.  If specified then a VPC instance is created. Used only when command=create.
      tags                   # tags dict to apply to a resource. Used with command=create, command=replicate, command=restore. Requires boto >= 2.26.0
      upgrade                # Indicates that minor version upgrades should be applied automatically. Used only when command=create or command=replicate.
      username               # Master database username. Used only when command=create.
      vpc_security_groups    # Comma separated list of one or more vpc security group ids. Also requires `subnet` to be specified. Used only when command=create or command=modify.
      wait                   # When command=create, replicate, modify or restore then wait for the database to enter the 'available' state.  When command=delete wait for the database to be terminated.
      wait_timeout           # how long before wait gives up, in seconds
      zone                   # availability zone in which to launch the instance. Used only when command=create, command=replicate or command=restore.

- name: manage RDS parameter groups
  action: rds_param_group
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      description            # Database parameter group description. Only set when a new group is added.
      engine                 # The type of database for this group. Required for state=present.
      immediate              # Whether to apply the changes immediately, or after the next reboot of any associated instances.
      name=                  # Database parameter group identifier.
      params                 # Map of parameter names and values. Numeric values may be represented as K for kilo (1024), M for mega (1024^2), G for giga (1024^3), or T for tera (1024^4), and these values will be expanded into the appropriate number before being set in the parameter group.
      region=                # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      state=                 # Specifies whether the group should be present or absent.

- name: manage RDS database subnet groups
  action: rds_subnet_group
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      description            # Database subnet group description. Only set when a new group is added.
      name=                  # Database subnet group identifier.
      region=                # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      state=                 # Specifies whether the subnet should be present or absent.
      subnets                # List of subnet IDs that make up the database subnet group.

- name: Manage Red Hat Network registration and subscriptions using the C(subscription-manager) command
  action: redhat_subscription
      activationkey          # supply an activation key for use with registration
      autosubscribe          # Upon successful registration, auto-consume available subscriptions
      password               # Red Hat Network password
      pool                   # Specify a subscription pool name to consume.  Regular expressions accepted.
      rhsm_baseurl           # Specify CDN baseurl
      server_hostname        # Specify an alternative Red Hat Network server
      server_insecure        # Allow traffic over insecure http
      state                  # whether to register and subscribe (`present'), or unregister (`absent') a system
      username               # Red Hat Network username

- name: Various redis commands, slave and flush
  action: redis
      command=               # The selected redis command
      db                     # The database to flush (used in db mode) [flush command]
      flush_mode             # Type of flush (all the dbs in a redis instance or a specific one) [flush command]
      login_host             # The host running the database
      login_password         # The password used to authenticate with (usually not used)
      login_port             # The port to connect to
      master_host            # The host of the master instance [slave command]
      master_port            # The port of the master instance [slave command]
      name                   # A redis config key.
      slave_mode             # the mode of the redis instance [slave command]
      value                  # A redis config value.

- name: Replace all instances of a particular string in a file using a back-referenced regular expression.
  action: replace
      backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      dest=                  # The file to modify.
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      others                 # All arguments accepted by the [file] module also work here.
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      regexp=                # The regular expression to look for in the contents of the file. Uses Python regular expressions; see http://docs.python.org/2/library/re.html. Uses multiline mode, which means `^' and `$' match the beginning and end respectively of `each line' of the file.
      replace                # The string to replace regexp matches. May contain backreferences that will get expanded with the regexp capture groups if the regexp matches. If not set, matches are removed entirely.
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      validate               # validation to run before copying into place

- name: Adds or removes Red Hat software channels
  action: rhn_channel
      name=                  # name of the software channel
      password=              # the user's password
      state                  # whether the channel should be present or not
      sysname=               # name of the system as it is known in RHN/Satellite
      url=                   # The full url to the RHN/Satellite api
      user=                  # RHN/Satellite user

- name: Manage Red Hat Network registration using the C(rhnreg_ks) command
  action: rhn_register
      activationkey          # supply an activation key for use with registration
      channels               # Optionally specify a list of comma-separated channels to subscribe to upon successful registration.
      password               # Red Hat Network password
      server_url             # Specify an alternative Red Hat Network server URL
      state                  # whether to register (`present'), or unregister (`absent') a system
      username               # Red Hat Network username

- name: This module handles some common Riak operations
  action: riak
      command                # The command you would like to perform against the cluster.
      config_dir             # The path to the riak configuration directory
      http_conn              # The ip address and port that is listening for Riak HTTP queries
      target_node            # The target node for certain operations (join, ping)
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
      wait_for_handoffs      # Number of seconds to wait for handoffs to complete.
      wait_for_ring          # Number of seconds to wait for all nodes to agree on the ring.
      wait_for_service       # Waits for a riak service to come online before continuing.

- name: Notify Rollbar about app deployments
  action: rollbar_deployment
      comment                # Deploy comment (e.g. what is being deployed).
      environment=           # Name of the environment being deployed, e.g. 'production'.
      revision=              # Revision number/sha being deployed.
      rollbar_user           # Rollbar username of the user who deployed.
      token=                 # Your project access token.
      url                    # Optional URL to submit the notification to.
      user                   # User who deployed.
      validate_certs         # If `no', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: add or delete entries in Amazons Route53 DNS service
  action: route53
      alias                  # Indicates if this is an alias record.
      alias_hosted_zone_id   # The hosted zone identifier.
      aws_access_key         # AWS access key.
      aws_secret_key         # AWS secret key.
      command=               # Specifies the action to take.
      overwrite              # Whether an existing record should be overwritten on create if values do not match
      private_zone           # If set to true, the private zone matching the requested name within the domain will be used if there are both public and private zones. The default is to use the public zone.
      record=                # The full DNS record to create or delete
      retry_interval         # In the case that route53 is still servicing a prior request, this module will wait and try again after this many seconds. If you have many domain names, the default of 500 seconds may be too long.
      ttl                    # The TTL to give the new record
      type=                  # The type of DNS record to create
      value                  # The new value when creating a DNS record.  Multiple comma-spaced values are allowed for non-alias records.  When deleting a record all values for the record must be specified or Route53 will not delete it.
      zone=                  # The DNS zone to modify

- name: Adds or removes a gpg key from the rpm db
  action: rpm_key
      key=                   # Key that will be modified. Can be a url, a file, or a keyid if the key already exists in the database.
      state                  # Wheather the key will be imported or removed from the rpm db.
      validate_certs         # If `no' and the `key' is a url starting with https, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: S3 module putting a file into S3.
  action: s3
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      bucket=                # Bucket name.
      dest                   # The destination file path when downloading an object/key with a GET operation.
      expiration             # Time limit (in seconds) for the URL generated and returned by S3/Walrus when performing a mode=put or mode=geturl operation.
      metadata               # Metadata for PUT operation, as a dictionary of 'key=value' and 'key=value,key=value'.
      mode=                  # Switches the module behaviour between put (upload), get (download), geturl (return download url (Ansible 1.3+), getstr (download object as string (1.3+)), create (bucket) and delete (bucket).
      object                 # Keyname of the object inside the bucket. Can be used to create "virtual directories", see examples.
      overwrite              # Force overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations.
      region                 # AWS region to create the bucket in. If not set then the value of the EC2_REGION and AWS_REGION environment variables are checked, followed by the aws_region and ec2_region settings in the Boto config file.  If none of those are set the region defaults to the S3 Location: US Standard.  Prior to ansible 1.8 this parameter could be specified but had no effect.
      s3_url                 # S3 URL endpoint for usage with Eucalypus, fakes3, etc.  Otherwise assumes AWS
      src                    # The source file path when performing a PUT operation.

- name: Runs a local script on a remote node after transferring it
  action: script
      creates                # a filename, when it already exists, this step will *not* be run.
      free_form=             # path to the local script file followed by optional arguments.
      removes                # a filename, when it does not exist, this step will *not* be run.

- name: Toggles SELinux booleans.
  action: seboolean
      name=                  # Name of the boolean to configure
      persistent             # Set to `yes' if the boolean setting should survive a reboot
      state=                 # Desired boolean value

- name: Change policy and state of SELinux
  action: selinux
      conf                   # path to the SELinux configuration file, if non-standard
      policy                 # name of the SELinux policy to use (example: `targeted') will be required if state is not `disabled'
      state=                 # The SELinux mode

- name: Manage services.
  action: service
      arguments              # Additional arguments provided on the command line
      enabled                # Whether the service should start on boot. *At least one of state and enabled are required.*
      name=                  # Name of the service.
      pattern                # If the service does not respond to the status command, name a substring to look for as would be found in the output of the `ps' command as a stand-in for a status result.  If the string is found, the service will be assumed to be running.
      runlevel               # For OpenRC init scripts (ex: Gentoo) only.  The runlevel that this service belongs to.
      sleep                  # If the service is being `restarted' then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that exit immediately after signaling a process to stop.
      state                  # `started'/`stopped' are idempotent actions that will not run commands unless necessary.  `restarted' will always bounce the service.  `reloaded' will always reload. *At least one of state and enabled are required.*

- name: Set host facts from a task
  action: set_fact
      key_value=             # The `set_fact' module takes key=value pairs as variables to set in the playbook scope. Or alternatively, accepts complex arguments using the `args:' statement.

- name: Gathers facts about remote hosts
  action: setup
      fact_path              # path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. File/results format can be json or ini-format
      filter                 # if supplied, only return facts that match this shell-style (fnmatch) wildcard.

- name: Execute commands in nodes.
  action: shell
      chdir                  # cd into this directory before running the command
      creates                # a filename, when it already exists, this step will *not* be run.
      executable             # change the shell used to execute the command. Should be an absolute path to the executable.
      free_form=             # The shell module takes a free form command to run, as a string.  There's not an actual option named "free form".  See the examples!
      removes                # a filename, when it does not exist, this step will *not* be run.
      warn                   # if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.

- name: Send Slack notifications
  action: slack
      channel                # Channel to send the message to. If absent, the message goes to the channel selected for the `token'.
      domain                 # Slack (sub)domain for your environment without protocol. (i.e. `future500.slack.com') In 1.8 and beyond, this is deprecated and may be ignored.  See token documentation for information.
      icon_emoji             # Emoji for the message sender. See Slack documentation for options. (if `icon_emoji' is set, `icon_url' will not be used)
      icon_url               # Url for the message sender's icon (default `http://www.ansible.com/favicon.ico')
      link_names             # Automatically create links for channels and usernames in `msg'.
      msg=                   # Message to send.
      parse                  # Setting for the message parser at Slack
      token=                 # Slack integration token.  This authenticates you to the slack service. Prior to 1.8, a token looked like `3Ffe373sfhRE6y42Fg3rvf4GlK'.  In 1.8 and above, ansible adapts to the new slack API where tokens look like `G922VJP24/D921DW937/3Ffe373sfhRE6y42Fg3rvf4GlK'.  If tokens are in the new format then slack will ignore any value of domain.  If the token is in the old format the domain is required.  Ansible has no control of when slack will get rid of the old API.  When slack does that the old format will stop working.
      username               # This is the sender of the message.
      validate_certs         # If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.

- name: Slurps a file from remote nodes
  action: slurp
      src=                   # The file on the remote system to fetch. This `must' be a file, not a directory.

- name: Retrive facts for a device using SNMP.
  action: snmp_facts
      authkey                # Authentication key, required if version is v3
      community              # The SNMP community string, required if version is v2/v2c
      host=                  # Set to target snmp server (normally {{inventory_hostname}})
      integrity              # Hashing algoritm, required if version is v3
      level                  # Authentication level, required if version is v3
      privacy                # Encryption algoritm, required if level is authPriv
      privkey                # Encryption key, required if version is authPriv
      username               # Username for SNMPv3, required if version is v3
      version=               # SNMP Version to use, v2/v2c or v3

- name: Send Amazon Simple Notification Service (SNS) messages
  action: sns
      aws_access_key         # AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
      aws_secret_key         # AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.
      email                  # Message to send to email-only subscription
      http                   # Message to send to HTTP-only subscription
      https                  # Message to send to HTTPS-only subscription
      msg=                   # Default message to send.
      region                 # The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.
      sms                    # Message to send to SMS-only subscription
      sqs                    # Message to send to SQS-only subscription
      subject                # Subject line for email delivery.
      topic=                 # The topic you want to publish to.

- name: retrieve file or file system status
  action: stat
      follow                 # Whether to follow symlinks
      get_checksum           # Whether to return a checksum of the file (currently sha1)
      get_md5                # Whether to return the md5 sum of the file.  Will return None if we're unable to use md5 (Common for FIPS-140 compliant systems)
      path=                  # The full path of the file/object to get the facts of

- name: Deploys a subversion repository.
  action: subversion
      dest=                  # Absolute path where the repository should be deployed.
      executable             # Path to svn executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
      export                 # If `yes', do export instead of checkout/update.
      force                  # If `yes', modified files will be discarded. If `no', module will fail if it encounters modified files. Prior to 1.9 the default was `yes`.
      password               # --password parameter passed to svn.
      repo=                  # The subversion URL to the repository.
      revision               # Specific revision to checkout.
      username               # --username parameter passed to svn.

- name: Manage the state of a program or group of programs running via supervisord
  action: supervisorctl
      config                 # The supervisor configuration file path
      name=                  # The name of the supervisord program or group to manage. The name will be taken as group name when it ends with a colon `:' Group support is only available in Ansible version 1.6 or later.
      password               # password to use for authentication
      server_url             # URL on which supervisord server is listening
      state=                 # The desired state of program/group.
      supervisorctl_path     # path to supervisorctl executable
      username               # username to use for authentication

- name: Manage daemontools services.
  action: svc
      downed                 # Should a 'down' file exist or not, if it exists it disables auto startup. defaults to no. Downed does not imply stopped.
      enabled                # Wheater the service is enabled or not, if disabled it also implies stopped. Make note that a service can be enabled and downed (no auto restart).
      name=                  # Name of the service to manage.
      service_dir            # directory svscan watches for services
      service_src            # directory where services are defined, the source of symlinks to service_dir.
      state                  # `Started'/`stopped' are idempotent actions that will not run commands unless necessary.  `restarted' will always bounce the svc (svc -t) and `killed' will always bounce the svc (svc -k). `reloaded' will send a sigusr1 (svc -u). `once' will run a normally downed svc once (svc -o), not really an idempotent operation.

- name: Manage Solaris SVR4 packages
  action: svr4pkg
      category               # Install/Remove category instead of a single package.
      name=                  # Package name, e.g. `SUNWcsr'
      proxy                  # HTTP[s] proxy to be used if `src' is a URL.
      response_file          # Specifies the location of a response file to be used if package expects input on install. (added in Ansible 1.4)
      src                    # Specifies the location to install the package from. Required when `state=present'. Can be any path acceptable to the `pkgadd' command's `-d' option. e.g.: `somefile.pkg', `/dir/with/pkgs', `http:/server/mypkgs.pkg'. If using a file or directory, they must already be accessible by the host. See the [copy] module for a way to get them there.
      state=                 # Whether to install (`present'), or remove (`absent') a package. If the package is to be installed, then `src' is required. The SVR4 package system doesn't provide an upgrade operation. You need to uninstall the old, then install the new package.
      zone                   # Whether to install the package only in the current zone, or install it into all zones. The installation into all zones works only if you are working with the global zone.

- name: Manage packages with swdepot package manager (HP-UX)
  action: swdepot
      depot                  # The source repository from which install or upgrade a package.
      name=                  # package name.
      state=                 # whether to install (`present', `latest'), or remove (`absent') a package.

- name: Uses rsync to make synchronizing file paths in your playbooks quick and easy.
  action: synchronize
      archive                # Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.
      checksum               # Skip based on checksum, rather than mod-time & size; Note that that "archive" option is still enabled by default - the "checksum" option will not disable it.
      compress               # Compress file data during the transfer. In most cases, leave this enabled unless it causes problems.
      copy_links             # Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.
      delete                 # Delete files that don't exist (after transfer, not before) in the `src' path. This option requires `recursive=yes'.
      dest=                  # Path on the destination machine that will be synchronized from the source; The path can be absolute or relative.
      dest_port              # Port number for ssh on the destination host. The ansible_ssh_port inventory var takes precedence over this value.
      dirs                   # Transfer directories without recursing
      existing_only          # Skip creating new files on receiver.
      group                  # Preserve group
      links                  # Copy symlinks as symlinks.
      mode                   # Specify the direction of the synchronization. In push mode the localhost or delegate is the source; In pull mode the remote host in context is the source.
      owner                  # Preserve owner (super user only)
      perms                  # Preserve permissions.
      recursive              # Recurse into directories.
      rsync_opts             # Specify additional rsync options by passing in an array.
      rsync_path             # Specify the rsync command to run on the remote machine. See `--rsync-path' on the rsync man page.
      rsync_timeout          # Specify a --timeout for the rsync command in seconds.
      set_remote_user        # put user@ for the remote paths. If you have a custom ssh config to define the remote user for a host that does not match the inventory user, you should set this parameter to "no".
      src=                   # Path on the source machine that will be synchronized to the destination; The path can be absolute or relative.
      times                  # Preserve modification times

- name: Manage entries in sysctl.conf.
  action: sysctl
      ignoreerrors           # Use this option to ignore errors about unknown keys.
      name=                  # The dot-separated path (aka `key') specifying the sysctl variable.
      reload                 # If `yes', performs a `/sbin/sysctl -p' if the `sysctl_file' is updated. If `no', does not reload `sysctl' even if the `sysctl_file' is updated.
      state                  # Whether the entry should be present or absent in the sysctl file.
      sysctl_file            # Specifies the absolute path to `sysctl.conf', if not `/etc/sysctl.conf'.
      sysctl_set             # Verify token value with the sysctl command and set with -w if necessary
      value                  # Desired value of the sysctl key.

- name: Templates a file out to a remote server.
  action: template
      backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      dest=                  # Location to render the template to on the remote machine.
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      src=                   # Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path.
      validate               # The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the visudo example below. validation to run before copying into place. The command is passed securely so shell features like expansion and pipes won't work.

- name: Sends a text message to a mobile phone through Twilio.
  action: twilio
      account_sid=           # u s e r ' s   a c c o u n t   i d   f o r   T w i l i o   f o u n d   o n   t h e   a c c o u n t   p a g e
      auth_token=            # u s e r ' s   a u t h e n t i c a t i o n   t o k e n   f o r   T w i l i o   f o u n d   o n   t h e   a c c o u n t   p a g e
      from_number=           # w h a t   p h o n e   n u m b e r   t o   s e n d   t h e   t e x t   m e s s a g e   f r o m ,   f o r m a t   + 1 5 5 5 1 1 1 2 2 2 2
      msg=                   # t h e   b o d y   o f   t h e   t e x t   m e s s a g e
      to_number=             # w h a t   p h o n e   n u m b e r   t o   s e n d   t h e   t e x t   m e s s a g e   t o ,   f o r m a t   + 1 5 5 5 1 1 1 2 2 2 2

- name: Send a message to typetalk
  action: typetalk
      client_id=             # OAuth2 client ID
      client_secret=         # OAuth2 client secret
      msg=                   # message body
      topic=                 # topic id to post message

- name: Manage firewall with UFW
  action: ufw
      delete                 # Delete rule.
      direction              # Select direction for a rule or default policy command.
      from_ip                # Source IP address.
      from_port              # Source port.
      insert                 # Insert the corresponding rule as rule number NUM
      interface              # Specify interface for rule.
      log                    # Log new connections matched to this rule
      logging                # Toggles logging. Logged packets use the LOG_KERN syslog facility.
      name                   # Use profile located in `/etc/ufw/applications.d'
      policy                 # Change the default policy for incoming or outgoing traffic.
      proto                  # TCP/IP protocol.
      rule                   # Add firewall rule
      state                  # `enabled' reloads firewall and enables firewall on boot. `disabled' unloads firewall and disables firewall on boot. `reloaded' reloads firewall. `reset' disables and resets firewall to installation defaults.
      to_ip                  # Destination IP address.
      to_port                # Destination port.

- name: Unpacks an archive after (optionally) copying it from the local machine.
  action: unarchive
      copy                   # If true, the file is copied from local 'master' to the target machine, otherwise, the plugin will look for src archive at the target machine.
      creates                # a filename, when it already exists, this step will *not* be run.
      dest=                  # Remote absolute path where the archive should be unpacked
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      src=                   # If copy=yes (default), local path to archive file to copy to the target server; can be absolute or relative. If copy=no, path on the target server to existing archive file to unpack.

- name: Pause and start Uptime Robot monitoring
  action: uptimerobot
      apikey=                # Uptime Robot API key.
      monitorid=             # ID of the monitor to check.
      state=                 # Define whether or not the monitor should be running or paused.

- name: Interacts with webservices
  action: uri
      HEADER_                # Any parameter starting with "HEADER_" is a sent with your request as a header. For example, HEADER_Content-Type="application/json" would send the header "Content-Type" along with your request with a value of "application/json".
      body                   # The body of the http request/response to the web service.
      creates                # a filename, when it already exists, this step will not be run.
      dest                   # path of where to download the file to (if desired). If `dest' is a directory, the basename of the file on the remote server will be used.
      follow_redirects       # Whether or not the URI module should follow redirects. `all' will follow all redirects. `safe' will follow only "safe" redirects, where "safe" means that the client is only doing a GET or HEAD on the URI to which it is being redirected. `none' will not follow any redirects. Note that `yes' and `no' choices are accepted for backwards compatibility, where `yes' is the equivalent of `all' and `no' is the equivalent of `safe'. `yes' and `no' are deprecated and will be removed in some future version of Ansible.
      force_basic_auth       # httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail. This option forces the sending of the Basic authentication header upon initial request.
      method                 # The HTTP method of the request or response.
      others                 # all arguments accepted by the [file] module also work here
      password               # password for the module to use for Digest, Basic or WSSE authentication.
      removes                # a filename, when it does not exist, this step will not be run.
      return_content         # Whether or not to return the body of the request as a "content" key in the dictionary result. If the reported Content-type is "application/json", then the JSON is additionally loaded into a key called `json' in the dictionary results.
      status_code            # A valid, numeric, HTTP status code that signifies success of the request. Can also be comma separated list of status codes.
      timeout                # The socket level timeout in seconds
      url=                   # HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path
      user                   # username for the module to use for Digest, Basic or WSSE authentication.
      validate_certs         # If `no', SSL certificates will not be validated.  This should only set to `no' used on personally controlled sites using self-signed certificates.  Prior to 1.9.2 the code defaulted to `no'.

- name: Urpmi manager
  action: urpmi
      force                  # Assume "yes" is the answer to any question urpmi has to ask. Corresponds to the `--force' option for `urpmi'.
      no-suggests            # Corresponds to the `--no-suggests' option for `urpmi'.
      pkg=                   # name of package to install, upgrade or remove.
      state                  # Indicates the desired package state
      update_cache           # update the package database first `urpmi.update -a'.

- name: Manage user accounts
  action: user
      append                 # If `yes', will only add groups, not set them to just the list in `groups'.
      comment                # Optionally sets the description (aka `GECOS') of user account.
      createhome             # Unless set to `no', a home directory will be made for the user when the account is created or if the home directory does not exist.
      expires                # An expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently supported on Linux and FreeBSD.
      force                  # When used with `state=absent', behavior is as with `userdel --force'.
      generate_ssh_key       # Whether to generate a SSH key for the user in question. This will *not* overwrite an existing SSH key.
      group                  # Optionally sets the user's primary group (takes a group name).
      groups                 # Puts the user in this comma-delimited list of groups. When set to the empty string ('groups='), the user is removed from all groups except the primary group.
      home                   # Optionally set the user's home directory.
      login_class            # Optionally sets the user's login class for FreeBSD, OpenBSD and NetBSD systems.
      move_home              # If set to `yes' when used with `home=', attempt to move the user's home directory to the specified directory if it isn't there already.
      name=                  # Name of the user to create, remove or modify.
      non_unique             # Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.
      password               # Optionally set the user's password to this crypted value.  See the user example in the github examples directory for what this looks like in a playbook. The `FAQ <http://docs.ansible.com/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module>`_ contains details on various ways to generate these password values. Note on Darwin system, this value has to be cleartext. Beware of security issues.
      remove                 # When used with `state=absent', behavior is as with `userdel --remove'.
      shell                  # Optionally set the user's shell.
      ssh_key_bits           # Optionally specify number of bits in SSH key to create.
      ssh_key_comment        # Optionally define the comment for the SSH key.
      ssh_key_file           # Optionally specify the SSH key filename. If this is a relative filename then it will be relative to the user's home directory.
      ssh_key_passphrase     # Set a passphrase for the SSH key.  If no passphrase is provided, the SSH key will default to having no passphrase.
      ssh_key_type           # Optionally specify the type of SSH key to generate. Available SSH key types will depend on implementation present on target host.
      state                  # Whether the account should exist or not, taking action if the state is different from what is stated.
      system                 # When creating an account, setting this to `yes' makes the user a system account.  This setting cannot be changed on existing users.
      uid                    # Optionally sets the `UID' of the user.
      update_password        # `always' will update passwords if they differ.  `on_create' will only set the password for newly created users.

- name: Manages virtual machines supported by libvirt
  action: virt
      command                # in addition to state management, various non-idempotent commands are available. See examples
      name=                  # name of the guest VM being managed. Note that VM must be previously defined with xml.
      state                  # Note that there may be some lag for state requests like `shutdown' since these refer only to VM states. After starting a guest, it may not be immediately accessible.
      uri                    # libvirt connection uri
      xml                    # XML document used with the define command

- name: Create/delete/manage a guest VM through VMware vSphere.
  action: vsphere_guest
      cluster                # The name of the cluster to create the VM in. By default this is derived from the host you tell the module to build the guest on.
      esxi                   # Dictionary which includes datacenter and hostname on which the VM should be created. For standalone ESXi hosts, ha-datacenter should be used as the datacenter name
      force                  # Boolean. Allows you to run commands which may alter the running state of a guest. Also used to reconfigure and destroy.
      from_template          # Specifies if the VM should be deployed from a template (cannot be ran with state)
      guest=                 # The virtual server name you wish to manage.
      password=              # Password of the user to connect to vcenter as.
      resource_pool          # The name of the resource_pool to create the VM in.
      state                  # Indicate desired state of the vm.
      template_src           # Name of the source template to deploy from
      username=              # Username to connect to vcenter as.
      vcenter_hostname=      # The hostname of the vcenter server the module will connect to, to create the guest.
      vm_disk                # A key, value list of disks and their sizes and which datastore to keep it in.
      vm_extra_config        # A key, value pair of any extra values you want set or changed in the vmx file of the VM. Useful to set advanced options on the VM.
      vm_hardware            # A key, value list of VM config settings. Must include ['memory_mb', 'num_cpus', 'osid', 'scsi'].
      vm_hw_version          # Desired hardware version identifier (for example, "vmx-08" for vms that needs to be managed with vSphere Client). Note that changing hardware version of existing vm is not supported.
      vm_nic                 # A key, value list of nics, their types and what network to put them on.
      vmware_guest_facts     # Gather facts from vCenter on a particular VM

- name: Waits for a condition before continuing.
  action: wait_for
      connect_timeout        # maximum number of seconds to wait for a connection to happen before closing and retrying
      delay                  # number of seconds to wait before starting to poll
      exclude_hosts          # list of hosts or IPs to ignore when looking for active TCP connections for `drained' state
      host                   # A resolvable hostname or IP address to wait for
      path                   # path to a file on the filesytem that must exist before continuing
      port                   # port number to poll
      search_regex           # Can be used to match a string in either a file or a socket connection. Defaults to a multiline regex.
      state                  # either `present', `started', or `stopped', `absent', or `drained' When checking a port `started' will ensure the port is open, `stopped' will check that it is closed, `drained' will check for active connections When checking for a file or a search string `present' or `started' will ensure that the file or string is present before continuing, `absent' will check that file is absent or removed
      timeout                # maximum number of seconds to wait for

- name: Installs packages using chocolatey
  action: win_chocolatey
      force                  # Forces install of the package (even if it already exists). Using Force will cause ansible to always report that a change was made
      logPath                # Where to log command output to
      name=                  # Name of the package to be installed
      showlog                # Outputs the chocolatey log inside a chocolatey_log property.
      source                 # Which source to install from
      state                  # State of the package on the system
      version                # Specific version of the package to be installed Ignored when state == 'absent'

- name: Copies files to remote locations on windows hosts.
  action: win_copy
      dest=                  # Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too. Use \ for path separators.
      src                    # Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.

- name: Installs and uninstalls Windows Features
  action: win_feature
      include_management_tools   # Adds the corresponding management tools to the specified feature
      include_sub_features   # Adds all subfeatures of the specified feature
      name=                  # Names of roles or features to install as a single feature or a comma-separated list of features
      restart                # Restarts the computer automatically when installation is complete, if restarting is required by the roles or features installed.
      state                  # State of the features or roles on the system

- name: Creates, touches or removes files or directories.
  action: win_file
      follow                 # This flag indicates that filesystem links, if they exist, should be followed.
      group                  # name of the group that should own the file/directory, as would be fed to `chown'
      mode                   # mode the file or directory should be, such as 0644 as would be fed to `chmod'. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
      owner                  # name of the user that should own the file/directory, as would be fed to `chown'
      path=                  # path to the file being managed.  Aliases: `dest', `name'
      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'. `_default' feature works as for `seuser'.
      serole                 # role part of SELinux file context, `_default' feature works as for `seuser'.
      setype                 # type part of SELinux file context, `_default' feature works as for `seuser'.
      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will use the `user' portion of the policy if available
      state                  # If `directory', all immediate subdirectories will be created if they do not exist. If `file', the file will NOT be created if it does not exist, see the [copy] or [template] module if you want that behavior.  If `absent', directories will be recursively deleted, and files will be removed. If `touch', an empty file will be created if the c(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line).

- name: Fetches a file from a given URL
  action: win_get_url
      dest                   # The absolute path of the location to save the file at the URL. Be sure to include a filename and extension as appropriate.
      url=                   # The full URL of a file to download

- name: Add and remove local groups
  action: win_group
      description            # Description of the group
      name=                  # Name of the group
      state                  # Create or remove the group

- name: Installs and uninstalls Windows MSI files
  action: win_msi
      creates                # Path to a file created by installing the MSI to prevent from attempting to reinstall the package on every run
      path=                  # File system path to the MSI file to install
      state                  # Whether the MSI file should be installed or uninstalled

- name: A windows version of the classic ping module.
  action: win_ping
      data                   # Alternate data to return instead of 'pong'

- name: Manages Windows services
  action: win_service
      name=                  # Name of the service
      start_mode             # Set the startup type for the service
      state                  # `started'/`stopped' are idempotent actions that will not run commands unless necessary.  `restarted' will always bounce the service.

- name: returns information about a Windows file
  action: win_stat
      get_md5                # Whether to return the md5 sum of the file
      path=                  # The full path of the file/object to get the facts of; both forward and back slashes are accepted.

- name: Templates a file out to a remote server.
  action: win_template
      dest=                  # Location to render the template to on the remote machine.
      src=                   # Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path.

- name: Lists / Installs windows updates
  action: win_updates
      category               # Which category to install updates from

- name: Manages local Windows user accounts
  action: win_user
      account_disabled       # `yes' will disable the user account.  `no' will clear the disabled flag.
      account_locked         # `no' will unlock the user account if locked.
      description            # Description of the user
      fullname               # Full name of the user
      groups                 # Adds or removes the user from this comma-separated lis of groups, depending on the value of `groups_action'. When `groups_action' is `replace' and `groups' is set to the empty string ('groups='), the user is removed from all groups.
      groups_action          # If `replace', the user is added as a member of each group in `groups' and removed from any other groups.  If `add', the user is added to each group in `groups' where not already a member.  If `remove', the user is removed from each group in `groups'.
      name=                  # Name of the user to create, remove or modify.
      password               # Optionally set the user's password to this (plain text) value.
      password_expired       # `yes' will require the user to change their password at next login. `no' will clear the expired password flag.
      password_never_expires   # `yes' will set the password to never expire.  `no' will allow the password to expire.
      state                  # When `present', creates or updates the user account.  When `absent', removes the user account if it exists.  When `query' (new in 1.9), retrieves the user account details without making any changes.
      update_password        # `always' will update passwords if they differ.  `on_create' will only set the password for newly created users.
      user_cannot_change_password   # `yes' will prevent the user from changing their password.  `no' will allow the user to change their password.

- name: set/retrieve extended attributes
  action: xattr
      follow                 # if yes, dereferences symlinks and sets/gets attributes on symlink target, otherwise acts on symlink itself.
      key                    # The name of a specific Extended attribute key to set/retrieve
      name=                  # The full path of the file/object to get the facts of
      state                  # defines which state you want to do. `read' retrieves the current value for a `key' (default) `present' sets `name' to `value', default if value is set `all' dumps all data `keys' retrieves all keys `absent' deletes the key
      value                  # The value to set the named name/key to, it automatically sets the `state' to 'set'

- name: Manages packages with the I(yum) package manager
  action: yum
      conf_file              # The remote yum configuration file to use for the transaction.
      disable_gpg_check      # Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is `present' or `latest'.
      disablerepo            # `Repoid' of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
      enablerepo             # `Repoid' of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".
      list                   # Various (non-idempotent) commands for usage with `/usr/bin/ansible' and `not' playbooks. See examples.
      name=                  # Package name, or package specifier with version, like `name-1.0'. When using state=latest, this can be '*' which means run: yum -y update. You can also pass a url or a local path to a rpm file.
      state                  # Whether to install (`present', `latest'), or remove (`absent') a package.
      update_cache           # Force updating the cache. Has an effect only if state is `present' or `latest'.

- name: Add or remove a host group to Zabbix.
  action: zabbix_group
      host_group=            # Name of the host group to be added or removed.
      login_password=        # Zabbix user password. If not set environment variable `ZABBIX_LOGIN_PASSWORD' is used.
      login_user=            # Zabbix user name. If not set environment variable `ZABBIX_LOGIN_USER' is used.
      server_url=            # Url of Zabbix server, with protocol (http or https) e.g. https://monitoring.example.com/zabbix. `url' is an alias for `server_url'. If not set environment variable `ZABBIX_SERVER_URL' is used.
      state                  # Whether the host group should be added or removed.

- name: Create Zabbix maintenance windows
  action: zabbix_maintenance
      collect_data           # Type of maintenance. With data collection, or without.
      desc=                  # Short description of maintenance window.
      host_groups            # Host groups to manage maintenance window for. Separate multiple groups with commas. `host_group' is an alias for `host_groups'. *Required* option when `state' is `present' and no `host_names' specified.
      host_names             # Hosts to manage maintenance window for. Separate multiple hosts with commas. `host_name' is an alias for `host_names'. *Required* option when `state' is `present' and no `host_groups' specified.
      login_password=        # Zabbix user password.
      login_user=            # Zabbix user name.
      minutes                # Length of maintenance window in minutes.
      name=                  # Unique name of maintenance window.
      server_url=            # Url of Zabbix server, with protocol (http or https). `url' is an alias for `server_url'.
      state                  # Create or remove a maintenance window.

- name: Manage zfs
  action: zfs
      aclinherit             # The aclinherit property.
      aclmode                # The aclmode property.
      atime                  # The atime property.
      canmount               # The canmount property.
      casesensitivity        # The casesensitivity property.
      checksum               # The checksum property.
      compression            # The compression property.
      copies                 # The copies property.
      dedup                  # The dedup property.
      devices                # The devices property.
      exec                   # The exec property.
      jailed                 # The jailed property.
      logbias                # The logbias property.
      mountpoint             # The mountpoint property.
      name=                  # File system, snapshot or volume name e.g. `rpool/myfs'
      nbmand                 # The nbmand property.
      normalization          # The normalization property.
      primarycache           # The primarycache property.
      quota                  # The quota property.
      readonly               # The readonly property.
      recordsize             # The recordsize property.
      refquota               # The refquota property.
      refreservation         # The refreservation property.
      reservation            # The reservation property.
      secondarycache         # The secondarycache property.
      setuid                 # The setuid property.
      shareiscsi             # The shareiscsi property.
      sharenfs               # The sharenfs property.
      sharesmb               # The sharesmb property.
      snapdir                # The snapdir property.
      state=                 # Whether to create (`present'), or remove (`absent') a file system, snapshot or volume.
      sync                   # The sync property.
      utf8only               # The utf8only property.
      volblocksize           # The volblocksize property.
      volsize                # The volsize property.
      vscan                  # The vscan property.
      xattr                  # The xattr property.
      zoned                  # The zoned property.

- name: Manage packages on SUSE and openSUSE
  action: zypper
      disable_gpg_check      # Whether to disable to GPG signature checking of the package signature being installed. Has an effect only if state is `present' or `latest'.
      disable_recommends     # Corresponds to the `--no-recommends' option for `zypper'. Default behavior (`yes') modifies zypper's default behavior; `no' does install recommended packages.
      name=                  # package name or package specifier wth version `name' or `name-1.0'.
      state                  # `present' will make sure the package is installed. `latest'  will make sure the latest version of the package is installed. `absent'  will make sure the specified package is not installed.

- name: Add and remove Zypper repositories
  action: zypper_repository
      description            # A description of the repository
      disable_gpg_check      # Whether to disable GPG signature checking of all packages. Has an effect only if state is `present'.
      name                   # A name for the repository. Not required when adding repofiles.
      refresh                # Enable autorefresh of the repository.
      repo                   # URI of the repository or .repo file. Required when state=present.
      state                  # A source string state.

